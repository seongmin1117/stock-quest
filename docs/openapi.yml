openapi: 3.0.3
info:
  title: StockQuest API
  description: 모의 투자 챌린지 학습 플랫폼 API
  version: 1.0.0
  contact:
    name: StockQuest Team
    email: support@stockquest.com

servers:
  - url: http://localhost:8080
    description: 개발 환경
  - url: https://api.stockquest.com
    description: 운영 환경

security:
  - BearerAuth: []

paths:
  # 인증 API
  /api/auth/signup:
    post:
      tags: [인증]
      summary: 회원가입
      description: 새로운 사용자 계정을 생성합니다
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        201:
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: 잘못된 요청 (이메일 중복, 유효성 오류 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags: [인증]
      summary: 로그인
      description: 이메일과 비밀번호로 로그인합니다
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: 인증 실패 (이메일 또는 비밀번호 오류)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 챌린지 API
  /api/challenges:
    get:
      tags: [챌린지]
      summary: 챌린지 목록 조회
      description: 사용 가능한 챌린지 목록을 조회합니다
      parameters:
        - name: page
          in: query
          description: 페이지 번호 (0부터 시작)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지 크기
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          description: 챌린지 상태 필터
          schema:
            type: string
            enum: [DRAFT, ACTIVE, COMPLETED]
      responses:
        200:
          description: 챌린지 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChallengeResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer

  /api/challenges/{challengeId}/start:
    post:
      tags: [챌린지]
      summary: 챌린지 참여 시작
      description: 특정 챌린지에 참여를 시작하고 세션을 생성합니다
      parameters:
        - name: challengeId
          in: path
          required: true
          description: 챌린지 ID
          schema:
            type: integer
            format: int64
      responses:
        201:
          description: 챌린지 참여 시작 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeSessionResponse'
        404:
          description: 챌린지를 찾을 수 없음
        409:
          description: 이미 참여 중인 챌린지

  /api/challenges/{challengeId}/instruments:
    get:
      tags: [챌린지]
      summary: 챌린지 상품 목록 조회
      description: 챌린지에 포함된 상품 목록을 조회합니다 (회사명 숨김)
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 상품 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChallengeInstrumentResponse'

  # 거래 API
  /api/sessions/{sessionId}/orders:
    post:
      tags: [거래]
      summary: 주문 접수
      description: 챌린지 세션에서 주문을 접수합니다
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        201:
          description: 주문 접수 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        400:
          description: 잘못된 주문 요청
        403:
          description: 거래 권한 없음 (세션 비활성화, 잔고 부족 등)

    get:
      tags: [거래]
      summary: 주문 내역 조회
      description: 세션의 모든 주문 내역을 조회합니다
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 주문 내역 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'

  /api/sessions/{sessionId}/portfolio:
    get:
      tags: [거래]
      summary: 포트폴리오 조회
      description: 현재 포트폴리오 포지션과 잔고를 조회합니다
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 포트폴리오 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioResponse'

  /api/sessions/{sessionId}/close:
    post:
      tags: [거래]
      summary: 챌린지 세션 종료
      description: 챌린지 세션을 종료하고 결과를 확인합니다
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 챌린지 종료 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeResultResponse'

  # 리더보드 API
  /api/challenges/{challengeId}/leaderboard:
    get:
      tags: [리더보드]
      summary: 리더보드 조회
      description: 챌린지의 현재 리더보드를 조회합니다
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: 조회할 순위 수 (최대 100위)
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        200:
          description: 리더보드 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardEntryResponse'

  # 커뮤니티 API
  /api/challenges/{challengeId}/posts:
    get:
      tags: [커뮤니티]
      summary: 게시글 목록 조회
      description: 챌린지의 커뮤니티 게시글 목록을 조회합니다
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'

    post:
      tags: [커뮤니티]
      summary: 게시글 작성
      description: 챌린지 커뮤니티에 새 게시글을 작성합니다
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        201:
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'

  # 적금 상품 API
  /api/products:
    get:
      tags: [적금상품]
      summary: 적금 상품 목록 조회
      description: 사용 가능한 예금 및 채권 상품 목록을 조회합니다
      responses:
        200:
          description: 상품 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavingsProductResponse'

  /api/products/{productId}/subscribe:
    post:
      tags: [적금상품]
      summary: 상품 가입
      description: 예금 또는 채권 상품에 가입합니다
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeProductRequest'
      responses:
        201:
          description: 상품 가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavingsPositionResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # 인증 관련 스키마
    SignupRequest:
      type: object
      required: [email, password, nickname]
      properties:
        email:
          type: string
          format: email
          description: 사용자 이메일
          example: user@example.com
        password:
          type: string
          minLength: 8
          description: 비밀번호 (최소 8자)
          example: password123
        nickname:
          type: string
          minLength: 2
          maxLength: 20
          description: 사용자 닉네임
          example: 투자왕

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT 인증 토큰
        user:
          $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        nickname:
          type: string
        createdAt:
          type: string
          format: date-time

    # 챌린지 관련 스키마
    ChallengeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          description: 챌린지 제목
        description:
          type: string
          description: 챌린지 설명
        periodStart:
          type: string
          format: date
          description: 시뮬레이션 시작일
        periodEnd:
          type: string
          format: date
          description: 시뮬레이션 종료일
        speedFactor:
          type: integer
          description: 시간 압축 배율
        status:
          type: string
          enum: [DRAFT, ACTIVE, COMPLETED]
        createdAt:
          type: string
          format: date-time

    ChallengeSessionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        challengeId:
          type: integer
          format: int64
        seedBalance:
          type: number
          format: decimal
          description: 시작 자금
        currentBalance:
          type: number
          format: decimal
          description: 현재 현금 잔고
        status:
          type: string
          enum: [READY, ACTIVE, ENDED]
        startedAt:
          type: string
          format: date-time

    ChallengeInstrumentResponse:
      type: object
      properties:
        instrumentKey:
          type: string
          description: 챌린지 내 상품 키 (A, B, C...)
          example: A
        hiddenName:
          type: string
          description: 숨겨진 상품명
          example: 회사 A
        type:
          type: string
          enum: [STOCK, DEPOSIT, BOND]

    # 거래 관련 스키마
    PlaceOrderRequest:
      type: object
      required: [instrumentKey, side, quantity, orderType]
      properties:
        instrumentKey:
          type: string
          description: 상품 키
          example: A
        side:
          type: string
          enum: [BUY, SELL]
          description: 매수/매도 구분
        quantity:
          type: number
          format: decimal
          minimum: 0
          description: 주문 수량
        orderType:
          type: string
          enum: [MARKET, LIMIT]
          description: 주문 유형
        limitPrice:
          type: number
          format: decimal
          description: 지정가 (지정가 주문 시 필수)

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        instrumentKey:
          type: string
        side:
          type: string
          enum: [BUY, SELL]
        quantity:
          type: number
          format: decimal
        orderType:
          type: string
          enum: [MARKET, LIMIT]
        limitPrice:
          type: number
          format: decimal
        executedPrice:
          type: number
          format: decimal
        slippageRate:
          type: number
          format: decimal
        status:
          type: string
          enum: [PENDING, EXECUTED, CANCELLED]
        orderedAt:
          type: string
          format: date-time
        executedAt:
          type: string
          format: date-time

    PortfolioResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
        currentBalance:
          type: number
          format: decimal
          description: 현금 잔고
        positions:
          type: array
          items:
            $ref: '#/components/schemas/PositionResponse'
        totalValue:
          type: number
          format: decimal
          description: 총 평가금액
        totalPnL:
          type: number
          format: decimal
          description: 총 손익
        returnPercentage:
          type: number
          format: decimal
          description: 수익률 (%)

    PositionResponse:
      type: object
      properties:
        instrumentKey:
          type: string
        hiddenName:
          type: string
          description: 숨겨진 상품명
        quantity:
          type: number
          format: decimal
        averagePrice:
          type: number
          format: decimal
        totalCost:
          type: number
          format: decimal
        currentPrice:
          type: number
          format: decimal
        currentValue:
          type: number
          format: decimal
        unrealizedPnL:
          type: number
          format: decimal

    ChallengeResultResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
        finalBalance:
          type: number
          format: decimal
        totalPnL:
          type: number
          format: decimal
        returnPercentage:
          type: number
          format: decimal
        rank:
          type: integer
        revealedInstruments:
          type: array
          items:
            $ref: '#/components/schemas/RevealedInstrumentResponse'
        portfolio:
          $ref: '#/components/schemas/PortfolioResponse'

    RevealedInstrumentResponse:
      type: object
      properties:
        instrumentKey:
          type: string
        actualTicker:
          type: string
          description: 실제 티커
        actualName:
          type: string
          description: 실제 회사명

    # 리더보드 관련 스키마
    LeaderboardEntryResponse:
      type: object
      properties:
        rank:
          type: integer
        userId:
          type: integer
          format: int64
        nickname:
          type: string
        returnPercentage:
          type: number
          format: decimal
        pnl:
          type: number
          format: decimal
        calculatedAt:
          type: string
          format: date-time

    # 커뮤니티 관련 스키마
    CreatePostRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          maxLength: 2000
          description: 게시글 내용

    PostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        authorNickname:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        commentCount:
          type: integer

    PostListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer

    # 적금 상품 관련 스키마
    SavingsProductResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum: [DEPOSIT, BOND]
        name:
          type: string
        rateApy:
          type: number
          format: decimal
          description: 연간 수익률 (%)
        tenorDays:
          type: integer
          description: 만기일수
        minAmount:
          type: number
          format: decimal
        maxAmount:
          type: number
          format: decimal
        description:
          type: string

    SubscribeProductRequest:
      type: object
      required: [amount]
      properties:
        amount:
          type: number
          format: decimal
          minimum: 10000
          description: 투자 금액

    SavingsPositionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productName:
          type: string
        principal:
          type: number
          format: decimal
        startDate:
          type: string
          format: date
        maturityDate:
          type: string
          format: date
        accruedInterest:
          type: number
          format: decimal
        status:
          type: string
          enum: [ACTIVE, MATURED, CANCELLED]

    # 공통 스키마
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 오류 코드
        message:
          type: string
          description: 오류 메시지
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          description: 요청 경로

tags:
  - name: 인증
    description: 사용자 인증 관련 API
  - name: 챌린지
    description: 투자 챌린지 관련 API
  - name: 거래
    description: 모의 거래 관련 API
  - name: 리더보드
    description: 순위 및 성과 관련 API
  - name: 커뮤니티
    description: 사용자 커뮤니티 관련 API
  - name: 적금상품
    description: 예금 및 채권 상품 관련 API