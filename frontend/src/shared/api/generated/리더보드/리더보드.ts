/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ErrorResponse,
  GetApiChallengesChallengeIdLeaderboardParams,
  LeaderboardResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * ÌäπÏ†ï Ï±åÎ¶∞ÏßÄÏùò Î¶¨ÎçîÎ≥¥ÎìúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå
 */
export const getApiChallengesChallengeIdLeaderboard = (
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
  signal?: AbortSignal,
) => {
  return apiClient<LeaderboardResponse[]>({
    url: `/api/challenges/${challengeId}/leaderboard`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiChallengesChallengeIdLeaderboardQueryKey = (
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
) => {
  return [
    `/api/challenges/${challengeId}/leaderboard`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiChallengesChallengeIdLeaderboardQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
  TError = unknown,
>(
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiChallengesChallengeIdLeaderboardQueryKey(challengeId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>
  > = ({ signal }) =>
    getApiChallengesChallengeIdLeaderboard(challengeId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!challengeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChallengesChallengeIdLeaderboardQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>
>;
export type GetApiChallengesChallengeIdLeaderboardQueryError = unknown;

/**
 * @summary Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå
 */
export const useGetApiChallengesChallengeIdLeaderboard = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
  TError = unknown,
>(
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiChallengesChallengeIdLeaderboardQueryOptions(
    challengeId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ï±åÎ¶∞ÏßÄ Ï¢ÖÎ£å ÌõÑ Î¶¨ÎçîÎ≥¥ÎìúÎ•º Í≥ÑÏÇ∞Ìï©ÎãàÎã§
 * @summary Î¶¨ÎçîÎ≥¥Îìú Í≥ÑÏÇ∞
 */
export const postApiChallengesChallengeIdLeaderboardCalculate = (
  challengeId: number,
) => {
  return apiClient<LeaderboardResponse[]>({
    url: `/api/challenges/${challengeId}/leaderboard/calculate`,
    method: "POST",
  });
};

export const getPostApiChallengesChallengeIdLeaderboardCalculateMutationOptions =
  <TError = ErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiChallengesChallengeIdLeaderboardCalculate>
      >,
      TError,
      { challengeId: number },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiChallengesChallengeIdLeaderboardCalculate>
    >,
    TError,
    { challengeId: number },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiChallengesChallengeIdLeaderboardCalculate>
      >,
      { challengeId: number }
    > = (props) => {
      const { challengeId } = props ?? {};

      return postApiChallengesChallengeIdLeaderboardCalculate(challengeId);
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiChallengesChallengeIdLeaderboardCalculateMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdLeaderboardCalculate>>
  >;

export type PostApiChallengesChallengeIdLeaderboardCalculateMutationError =
  ErrorResponse;

/**
 * @summary Î¶¨ÎçîÎ≥¥Îìú Í≥ÑÏÇ∞
 */
export const usePostApiChallengesChallengeIdLeaderboardCalculate = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiChallengesChallengeIdLeaderboardCalculate>
    >,
    TError,
    { challengeId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdLeaderboardCalculate>>,
  TError,
  { challengeId: number },
  TContext
> => {
  const mutationOptions =
    getPostApiChallengesChallengeIdLeaderboardCalculateMutationOptions(options);

  return useMutation(mutationOptions);
};
