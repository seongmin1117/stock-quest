/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Î™®Ïùò Ìà¨Ïûê Ï±åÎ¶∞ÏßÄ ÌïôÏäµ ÌîåÎû´Ìèº API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetApiChallengesChallengeIdLeaderboardParams,
  LeaderboardEntryResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * Ï±åÎ¶∞ÏßÄÏùò ÌòÑÏû¨ Î¶¨ÎçîÎ≥¥ÎìúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå
 */
export const getApiChallengesChallengeIdLeaderboard = (
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
  signal?: AbortSignal,
) => {
  return apiClient<LeaderboardEntryResponse[]>({
    url: `/api/challenges/${challengeId}/leaderboard`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiChallengesChallengeIdLeaderboardQueryKey = (
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
) => {
  return [
    `/api/challenges/${challengeId}/leaderboard`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiChallengesChallengeIdLeaderboardQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
  TError = unknown,
>(
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiChallengesChallengeIdLeaderboardQueryKey(challengeId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>
  > = ({ signal }) =>
    getApiChallengesChallengeIdLeaderboard(challengeId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!challengeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChallengesChallengeIdLeaderboardQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>
>;
export type GetApiChallengesChallengeIdLeaderboardQueryError = unknown;

/**
 * @summary Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå
 */
export const useGetApiChallengesChallengeIdLeaderboard = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
  TError = unknown,
>(
  challengeId: number,
  params?: GetApiChallengesChallengeIdLeaderboardParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdLeaderboard>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiChallengesChallengeIdLeaderboardQueryOptions(
    challengeId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
