/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * 모의 투자 챌린지 학습 플랫폼 API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { LeaderboardEntryResponse } from ".././model";

export const getGetApiChallengesChallengeIdLeaderboardResponseMock =
  (): LeaderboardEntryResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      calculatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      pnl: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      rank: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      returnPercentage: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    }));

export const getGetApiChallengesChallengeIdLeaderboardMockHandler = (
  overrideResponse?:
    | LeaderboardEntryResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LeaderboardEntryResponse[]> | LeaderboardEntryResponse[]),
) => {
  return http.get("*/api/challenges/:challengeId/leaderboard", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiChallengesChallengeIdLeaderboardResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getGetApiChallengesChallengeIdLeaderboardMockHandler(),
];
