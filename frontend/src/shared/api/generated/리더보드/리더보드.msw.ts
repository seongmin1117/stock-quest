/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { LeaderboardResponse } from ".././model";

export const getGetApiChallengesChallengeIdLeaderboardResponseMock =
  (): LeaderboardResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      completedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      finalBalance: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      profitLoss: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      profitLossPercent: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      rank: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sessionId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      totalValue: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      userNickname: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
    }));

export const getPostApiChallengesChallengeIdLeaderboardCalculateResponseMock =
  (): LeaderboardResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      completedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      finalBalance: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      profitLoss: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      profitLossPercent: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      rank: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sessionId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      totalValue: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      userNickname: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
    }));

export const getGetApiChallengesChallengeIdLeaderboardMockHandler = (
  overrideResponse?:
    | LeaderboardResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LeaderboardResponse[]> | LeaderboardResponse[]),
) => {
  return http.get("*/api/challenges/:challengeId/leaderboard", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiChallengesChallengeIdLeaderboardResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiChallengesChallengeIdLeaderboardCalculateMockHandler = (
  overrideResponse?:
    | LeaderboardResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LeaderboardResponse[]> | LeaderboardResponse[]),
) => {
  return http.post(
    "*/api/challenges/:challengeId/leaderboard/calculate",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostApiChallengesChallengeIdLeaderboardCalculateResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};
export const getMock = () => [
  getGetApiChallengesChallengeIdLeaderboardMockHandler(),
  getPostApiChallengesChallengeIdLeaderboardCalculateMockHandler(),
];
