/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  BacktestRequest,
  BacktestResponse,
  EfficientFrontierRequest,
  EfficientFrontierResponse,
  ErrorResponse,
  GetApiV1MlPortfolioOptimizationPortfolioIdHistoryParams,
  OptimizationHistoryResponse,
  OptimizationRequest,
  PortfolioOptimizationResponse,
  RebalancingSuggestionsResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * AI Í∏∞Î∞ò Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏµúÏ†ÅÌôîÎ•º Ïã§ÌñâÌï©ÎãàÎã§
 * @summary Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏµúÏ†ÅÌôî Ïã§Ìñâ
 */
export const postApiV1MlPortfolioOptimizationPortfolioIdOptimize = (
  portfolioId: number,
  optimizationRequest: OptimizationRequest,
) => {
  return apiClient<PortfolioOptimizationResponse>({
    url: `/api/v1/ml/portfolio-optimization/${portfolioId}/optimize`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: optimizationRequest,
  });
};

export const getPostApiV1MlPortfolioOptimizationPortfolioIdOptimizeMutationOptions =
  <TError = ErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdOptimize>
      >,
      TError,
      { portfolioId: number; data: OptimizationRequest },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdOptimize>
    >,
    TError,
    { portfolioId: number; data: OptimizationRequest },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdOptimize>
      >,
      { portfolioId: number; data: OptimizationRequest }
    > = (props) => {
      const { portfolioId, data } = props ?? {};

      return postApiV1MlPortfolioOptimizationPortfolioIdOptimize(
        portfolioId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiV1MlPortfolioOptimizationPortfolioIdOptimizeMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdOptimize>
    >
  >;
export type PostApiV1MlPortfolioOptimizationPortfolioIdOptimizeMutationBody =
  OptimizationRequest;
export type PostApiV1MlPortfolioOptimizationPortfolioIdOptimizeMutationError =
  ErrorResponse;

/**
 * @summary Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏµúÏ†ÅÌôî Ïã§Ìñâ
 */
export const usePostApiV1MlPortfolioOptimizationPortfolioIdOptimize = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdOptimize>
    >,
    TError,
    { portfolioId: number; data: OptimizationRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdOptimize>
  >,
  TError,
  { portfolioId: number; data: OptimizationRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiV1MlPortfolioOptimizationPortfolioIdOptimizeMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Ïùò Ìö®Ïú®Ï†Å ÌîÑÎ°†Ìã∞Ïñ¥Î•º Í≥ÑÏÇ∞Ìï©ÎãàÎã§
 * @summary Ìö®Ïú®Ï†Å ÌîÑÎ°†Ìã∞Ïñ¥ Í≥ÑÏÇ∞
 */
export const postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier = (
  portfolioId: number,
  efficientFrontierRequest: EfficientFrontierRequest,
) => {
  return apiClient<EfficientFrontierResponse>({
    url: `/api/v1/ml/portfolio-optimization/${portfolioId}/efficient-frontier`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: efficientFrontierRequest,
  });
};

export const getPostApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontierMutationOptions =
  <TError = ErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier
        >
      >,
      TError,
      { portfolioId: number; data: EfficientFrontierRequest },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier
      >
    >,
    TError,
    { portfolioId: number; data: EfficientFrontierRequest },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier
        >
      >,
      { portfolioId: number; data: EfficientFrontierRequest }
    > = (props) => {
      const { portfolioId, data } = props ?? {};

      return postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier(
        portfolioId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontierMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier
      >
    >
  >;
export type PostApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontierMutationBody =
  EfficientFrontierRequest;
export type PostApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontierMutationError =
  ErrorResponse;

/**
 * @summary Ìö®Ïú®Ï†Å ÌîÑÎ°†Ìã∞Ïñ¥ Í≥ÑÏÇ∞
 */
export const usePostApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        typeof postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier
      >
    >,
    TError,
    { portfolioId: number; data: EfficientFrontierRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<
      typeof postApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontier
    >
  >,
  TError,
  { portfolioId: number; data: EfficientFrontierRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiV1MlPortfolioOptimizationPortfolioIdEfficientFrontierMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Ïùò Î¶¨Î∞∏Îü∞Ïã± Ï†úÏïàÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Î¶¨Î∞∏Îü∞Ïã± Ï†úÏïà Ï°∞Ìöå
 */
export const getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions =
  (portfolioId: number, signal?: AbortSignal) => {
    return apiClient<RebalancingSuggestionsResponse>({
      url: `/api/v1/ml/portfolio-optimization/${portfolioId}/rebalancing-suggestions`,
      method: "GET",
      signal,
    });
  };

export const getGetApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestionsQueryKey =
  (portfolioId: number) => {
    return [
      `/api/v1/ml/portfolio-optimization/${portfolioId}/rebalancing-suggestions`,
    ] as const;
  };

export const getGetApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestionsQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions
      >
    >,
    TError = ErrorResponse,
  >(
    portfolioId: number,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions
            >
          >,
          TError,
          TData
        >
      >;
    },
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestionsQueryKey(
        portfolioId,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions
        >
      >
    > = ({ signal }) =>
      getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions(
        portfolioId,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!portfolioId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestionsQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions
      >
    >
  >;
export type GetApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestionsQueryError =
  ErrorResponse;

/**
 * @summary Î¶¨Î∞∏Îü∞Ïã± Ï†úÏïà Ï°∞Ìöå
 */
export const useGetApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions =
  <
    TData = Awaited<
      ReturnType<
        typeof getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions
      >
    >,
    TError = ErrorResponse,
  >(
    portfolioId: number,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestions
            >
          >,
          TError,
          TData
        >
      >;
    },
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
      getGetApiV1MlPortfolioOptimizationPortfolioIdRebalancingSuggestionsQueryOptions(
        portfolioId,
        options,
      );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
      queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
  };

/**
 * Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Ïùò ÏµúÏ†ÅÌôî Ïù¥Î†•ÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÏµúÏ†ÅÌôî Ïù¥Î†• Ï°∞Ìöå
 */
export const getApiV1MlPortfolioOptimizationPortfolioIdHistory = (
  portfolioId: number,
  params?: GetApiV1MlPortfolioOptimizationPortfolioIdHistoryParams,
  signal?: AbortSignal,
) => {
  return apiClient<OptimizationHistoryResponse>({
    url: `/api/v1/ml/portfolio-optimization/${portfolioId}/history`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1MlPortfolioOptimizationPortfolioIdHistoryQueryKey = (
  portfolioId: number,
  params?: GetApiV1MlPortfolioOptimizationPortfolioIdHistoryParams,
) => {
  return [
    `/api/v1/ml/portfolio-optimization/${portfolioId}/history`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1MlPortfolioOptimizationPortfolioIdHistoryQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getApiV1MlPortfolioOptimizationPortfolioIdHistory>
    >,
    TError = ErrorResponse,
  >(
    portfolioId: number,
    params?: GetApiV1MlPortfolioOptimizationPortfolioIdHistoryParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<typeof getApiV1MlPortfolioOptimizationPortfolioIdHistory>
          >,
          TError,
          TData
        >
      >;
    },
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetApiV1MlPortfolioOptimizationPortfolioIdHistoryQueryKey(
        portfolioId,
        params,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getApiV1MlPortfolioOptimizationPortfolioIdHistory>
      >
    > = ({ signal }) =>
      getApiV1MlPortfolioOptimizationPortfolioIdHistory(
        portfolioId,
        params,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!portfolioId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getApiV1MlPortfolioOptimizationPortfolioIdHistory>
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetApiV1MlPortfolioOptimizationPortfolioIdHistoryQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getApiV1MlPortfolioOptimizationPortfolioIdHistory>
    >
  >;
export type GetApiV1MlPortfolioOptimizationPortfolioIdHistoryQueryError =
  ErrorResponse;

/**
 * @summary ÏµúÏ†ÅÌôî Ïù¥Î†• Ï°∞Ìöå
 */
export const useGetApiV1MlPortfolioOptimizationPortfolioIdHistory = <
  TData = Awaited<
    ReturnType<typeof getApiV1MlPortfolioOptimizationPortfolioIdHistory>
  >,
  TError = ErrorResponse,
>(
  portfolioId: number,
  params?: GetApiV1MlPortfolioOptimizationPortfolioIdHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiV1MlPortfolioOptimizationPortfolioIdHistory>
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetApiV1MlPortfolioOptimizationPortfolioIdHistoryQueryOptions(
      portfolioId,
      params,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†ÑÎûµÏùò Î∞±ÌÖåÏä§Ìä∏Î•º Ïã§ÌñâÌï©ÎãàÎã§
 * @summary Î∞±ÌÖåÏä§Ìä∏ Ïã§Ìñâ
 */
export const postApiV1MlPortfolioOptimizationPortfolioIdBacktest = (
  portfolioId: number,
  backtestRequest: BacktestRequest,
) => {
  return apiClient<BacktestResponse>({
    url: `/api/v1/ml/portfolio-optimization/${portfolioId}/backtest`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: backtestRequest,
  });
};

export const getPostApiV1MlPortfolioOptimizationPortfolioIdBacktestMutationOptions =
  <TError = ErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdBacktest>
      >,
      TError,
      { portfolioId: number; data: BacktestRequest },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdBacktest>
    >,
    TError,
    { portfolioId: number; data: BacktestRequest },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdBacktest>
      >,
      { portfolioId: number; data: BacktestRequest }
    > = (props) => {
      const { portfolioId, data } = props ?? {};

      return postApiV1MlPortfolioOptimizationPortfolioIdBacktest(
        portfolioId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiV1MlPortfolioOptimizationPortfolioIdBacktestMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdBacktest>
    >
  >;
export type PostApiV1MlPortfolioOptimizationPortfolioIdBacktestMutationBody =
  BacktestRequest;
export type PostApiV1MlPortfolioOptimizationPortfolioIdBacktestMutationError =
  ErrorResponse;

/**
 * @summary Î∞±ÌÖåÏä§Ìä∏ Ïã§Ìñâ
 */
export const usePostApiV1MlPortfolioOptimizationPortfolioIdBacktest = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdBacktest>
    >,
    TError,
    { portfolioId: number; data: BacktestRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<typeof postApiV1MlPortfolioOptimizationPortfolioIdBacktest>
  >,
  TError,
  { portfolioId: number; data: BacktestRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiV1MlPortfolioOptimizationPortfolioIdBacktestMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
