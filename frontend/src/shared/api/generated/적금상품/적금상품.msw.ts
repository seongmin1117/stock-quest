/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * 모의 투자 챌린지 학습 플랫폼 API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  SavingsPositionResponse,
  SavingsProductResponse,
} from ".././model";

export const getGetApiProductsResponseMock = (): SavingsProductResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    maxAmount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    minAmount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    rateApy: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    tenorDays: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["DEPOSIT", "BOND"] as const),
      undefined,
    ]),
  }));

export const getPostApiProductsProductIdSubscribeResponseMock = (
  overrideResponse: Partial<SavingsPositionResponse> = {},
): SavingsPositionResponse => ({
  accruedInterest: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  maturityDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split("T")[0],
    undefined,
  ]),
  principal: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  productName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  startDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split("T")[0],
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["ACTIVE", "MATURED", "CANCELLED"] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiProductsMockHandler = (
  overrideResponse?:
    | SavingsProductResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SavingsProductResponse[]> | SavingsProductResponse[]),
) => {
  return http.get("*/api/products", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiProductsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiProductsProductIdSubscribeMockHandler = (
  overrideResponse?:
    | SavingsPositionResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SavingsPositionResponse> | SavingsPositionResponse),
) => {
  return http.post("*/api/products/:productId/subscribe", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiProductsProductIdSubscribeResponseMock(),
      ),
      {
        status: 201,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getGetApiProductsMockHandler(),
  getPostApiProductsProductIdSubscribeMockHandler(),
];
