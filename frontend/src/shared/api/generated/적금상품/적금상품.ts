/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Î™®Ïùò Ìà¨Ïûê Ï±åÎ¶∞ÏßÄ ÌïôÏäµ ÌîåÎû´Ìèº API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  SavingsPositionResponse,
  SavingsProductResponse,
  SubscribeProductRequest,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏòàÍ∏à Î∞è Ï±ÑÍ∂å ÏÉÅÌíà Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ï†ÅÍ∏à ÏÉÅÌíà Î™©Î°ù Ï°∞Ìöå
 */
export const getApiProducts = (signal?: AbortSignal) => {
  return apiClient<SavingsProductResponse[]>({
    url: `/api/products`,
    method: "GET",
    signal,
  });
};

export const getGetApiProductsQueryKey = () => {
  return [`/api/products`] as const;
};

export const getGetApiProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({
    signal,
  }) => getApiProducts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProducts>>
>;
export type GetApiProductsQueryError = unknown;

/**
 * @summary Ï†ÅÍ∏à ÏÉÅÌíà Î™©Î°ù Ï°∞Ìöå
 */
export const useGetApiProducts = <
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiProductsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÏòàÍ∏à ÎòêÎäî Ï±ÑÍ∂å ÏÉÅÌíàÏóê Í∞ÄÏûÖÌï©ÎãàÎã§
 * @summary ÏÉÅÌíà Í∞ÄÏûÖ
 */
export const postApiProductsProductIdSubscribe = (
  productId: number,
  subscribeProductRequest: SubscribeProductRequest,
) => {
  return apiClient<SavingsPositionResponse>({
    url: `/api/products/${productId}/subscribe`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: subscribeProductRequest,
  });
};

export const getPostApiProductsProductIdSubscribeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProductsProductIdSubscribe>>,
    TError,
    { productId: number; data: SubscribeProductRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiProductsProductIdSubscribe>>,
  TError,
  { productId: number; data: SubscribeProductRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiProductsProductIdSubscribe>>,
    { productId: number; data: SubscribeProductRequest }
  > = (props) => {
    const { productId, data } = props ?? {};

    return postApiProductsProductIdSubscribe(productId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiProductsProductIdSubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiProductsProductIdSubscribe>>
>;
export type PostApiProductsProductIdSubscribeMutationBody =
  SubscribeProductRequest;
export type PostApiProductsProductIdSubscribeMutationError = unknown;

/**
 * @summary ÏÉÅÌíà Í∞ÄÏûÖ
 */
export const usePostApiProductsProductIdSubscribe = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProductsProductIdSubscribe>>,
    TError,
    { productId: number; data: SubscribeProductRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiProductsProductIdSubscribe>>,
  TError,
  { productId: number; data: SubscribeProductRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiProductsProductIdSubscribeMutationOptions(options);

  return useMutation(mutationOptions);
};
