/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ChallengeDetailResponse,
  ChallengeListResponse,
  ErrorResponse,
  GetApiChallengesParams,
  StartChallengeResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * ÌôúÏÑ± ÏÉÅÌÉúÏùò Ï±åÎ¶∞ÏßÄ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ï±åÎ¶∞ÏßÄ Î™©Î°ù Ï°∞Ìöå
 */
export const getApiChallenges = (
  params?: GetApiChallengesParams,
  signal?: AbortSignal,
) => {
  return apiClient<ChallengeListResponse>({
    url: `/api/challenges`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiChallengesQueryKey = (
  params?: GetApiChallengesParams,
) => {
  return [`/api/challenges`, ...(params ? [params] : [])] as const;
};

export const getGetApiChallengesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiChallenges>>,
  TError = unknown,
>(
  params?: GetApiChallengesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallenges>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiChallengesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiChallenges>>
  > = ({ signal }) => getApiChallenges(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiChallenges>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChallengesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiChallenges>>
>;
export type GetApiChallengesQueryError = unknown;

/**
 * @summary Ï±åÎ¶∞ÏßÄ Î™©Î°ù Ï°∞Ìöå
 */
export const useGetApiChallenges = <
  TData = Awaited<ReturnType<typeof getApiChallenges>>,
  TError = unknown,
>(
  params?: GetApiChallengesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallenges>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiChallengesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÌäπÏ†ï Ï±åÎ¶∞ÏßÄÏùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ï±åÎ¶∞ÏßÄ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getApiChallengesChallengeId = (
  challengeId: number,
  signal?: AbortSignal,
) => {
  return apiClient<ChallengeDetailResponse>({
    url: `/api/challenges/${challengeId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiChallengesChallengeIdQueryKey = (challengeId: number) => {
  return [`/api/challenges/${challengeId}`] as const;
};

export const getGetApiChallengesChallengeIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeId>>,
  TError = ErrorResponse,
>(
  challengeId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiChallengesChallengeIdQueryKey(challengeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiChallengesChallengeId>>
  > = ({ signal }) => getApiChallengesChallengeId(challengeId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!challengeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiChallengesChallengeId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChallengesChallengeIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiChallengesChallengeId>>
>;
export type GetApiChallengesChallengeIdQueryError = ErrorResponse;

/**
 * @summary Ï±åÎ¶∞ÏßÄ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const useGetApiChallengesChallengeId = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeId>>,
  TError = ErrorResponse,
>(
  challengeId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiChallengesChallengeIdQueryOptions(
    challengeId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÏÉàÎ°úÏö¥ Ï±åÎ¶∞ÏßÄ ÏÑ∏ÏÖòÏùÑ ÏãúÏûëÌï©ÎãàÎã§
 * @summary Ï±åÎ¶∞ÏßÄ ÏãúÏûë
 */
export const postApiChallengesChallengeIdStart = (challengeId: number) => {
  return apiClient<StartChallengeResponse>({
    url: `/api/challenges/${challengeId}/start`,
    method: "POST",
  });
};

export const getPostApiChallengesChallengeIdStartMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdStart>>,
    TError,
    { challengeId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdStart>>,
  TError,
  { challengeId: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdStart>>,
    { challengeId: number }
  > = (props) => {
    const { challengeId } = props ?? {};

    return postApiChallengesChallengeIdStart(challengeId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiChallengesChallengeIdStartMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdStart>>
>;

export type PostApiChallengesChallengeIdStartMutationError = ErrorResponse;

/**
 * @summary Ï±åÎ¶∞ÏßÄ ÏãúÏûë
 */
export const usePostApiChallengesChallengeIdStart = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdStart>>,
    TError,
    { challengeId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdStart>>,
  TError,
  { challengeId: number },
  TContext
> => {
  const mutationOptions =
    getPostApiChallengesChallengeIdStartMutationOptions(options);

  return useMutation(mutationOptions);
};
