/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  ChallengeDetailResponse,
  ChallengeListResponse,
  StartChallengeResponse,
} from ".././model";

export const getGetApiChallengesResponseMock = (
  overrideResponse: Partial<ChallengeListResponse> = {},
): ChallengeListResponse => ({
  challenges: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      difficultyLevel: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "BEGINNER",
          "INTERMEDIATE",
          "ADVANCED",
        ] as const),
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      maxParticipants: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      participantCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiChallengesChallengeIdResponseMock = (
  overrideResponse: Partial<ChallengeDetailResponse> = {},
): ChallengeDetailResponse => ({
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  difficultyLevel: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "BEGINNER",
      "INTERMEDIATE",
      "ADVANCED",
    ] as const),
    undefined,
  ]),
  endDate: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  instruments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  maxParticipants: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  participantCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  seedBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  startDate: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userParticipation: faker.helpers.arrayElement([
    {
      isParticipating: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      sessionId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiChallengesChallengeIdStartResponseMock = (
  overrideResponse: Partial<StartChallengeResponse> = {},
): StartChallengeResponse => ({
  challengeId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  seedBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sessionId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["ACTIVE", "COMPLETED", "CANCELLED"] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiChallengesMockHandler = (
  overrideResponse?:
    | ChallengeListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ChallengeListResponse> | ChallengeListResponse),
) => {
  return http.get("*/api/challenges", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiChallengesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiChallengesChallengeIdMockHandler = (
  overrideResponse?:
    | ChallengeDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ChallengeDetailResponse> | ChallengeDetailResponse),
) => {
  return http.get("*/api/challenges/:challengeId", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiChallengesChallengeIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiChallengesChallengeIdStartMockHandler = (
  overrideResponse?:
    | StartChallengeResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<StartChallengeResponse> | StartChallengeResponse),
) => {
  return http.post("*/api/challenges/:challengeId/start", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiChallengesChallengeIdStartResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getGetApiChallengesMockHandler(),
  getGetApiChallengesChallengeIdMockHandler(),
  getPostApiChallengesChallengeIdStartMockHandler(),
];
