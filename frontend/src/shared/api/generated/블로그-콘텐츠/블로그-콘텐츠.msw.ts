/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  ArticleResponse,
  ArticleSearchResponse,
  CategoryResponse,
  TagResponse,
} from ".././model";

export const getGetApiV1ContentArticlesResponseMock = (
  overrideResponse: Partial<ArticleSearchResponse> = {},
): ArticleSearchResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      authorId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      authorNickname: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      canonicalUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      categoryId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      categoryName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      commentCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      difficulty: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "BEGINNER",
          "INTERMEDIATE",
          "ADVANCED",
        ] as const),
        undefined,
      ]),
      difficultyDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      featured: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      followable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      indexable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      likeCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      metaDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogImageUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ogTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      publishedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      readingTimeDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      readingTimeMinutes: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      schemaType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["DRAFT", "PUBLISHED", "ARCHIVED"] as const),
        undefined,
      ]),
      summary: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tagNames: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tags: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          active: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          articleCount: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          articleCountDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          colorCode: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          popularityScore: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              "GENERAL",
              "TECHNICAL",
              "LEVEL",
              "STRATEGY",
            ] as const),
            undefined,
          ]),
          typeDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
        })),
        undefined,
      ]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      twitterCardType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterImageUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterTitle: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      viewCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  currentPage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  numberOfElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1ContentArticlesSlugResponseMock = (
  overrideResponse: Partial<ArticleResponse> = {},
): ArticleResponse => ({
  authorId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  authorNickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  canonicalUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  categoryId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  categoryName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  commentCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  difficulty: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "BEGINNER",
      "INTERMEDIATE",
      "ADVANCED",
    ] as const),
    undefined,
  ]),
  difficultyDisplay: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  featured: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  followable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  indexable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  likeCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  metaDescription: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ogDescription: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ogImageUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ogTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  publishedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  readingTimeDisplay: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  readingTimeMinutes: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  schemaType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["DRAFT", "PUBLISHED", "ARCHIVED"] as const),
    undefined,
  ]),
  summary: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  tagNames: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  tags: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      articleCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      articleCountDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      colorCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      popularityScore: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "GENERAL",
          "TECHNICAL",
          "LEVEL",
          "STRATEGY",
        ] as const),
        undefined,
      ]),
      typeDisplay: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    })),
    undefined,
  ]),
  title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  twitterCardType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  twitterDescription: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  twitterImageUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  twitterTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  viewCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1ContentArticlesFeaturedResponseMock =
  (): ArticleResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      authorId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      authorNickname: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      canonicalUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      categoryId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      categoryName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      commentCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      difficulty: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "BEGINNER",
          "INTERMEDIATE",
          "ADVANCED",
        ] as const),
        undefined,
      ]),
      difficultyDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      featured: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      followable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      indexable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      likeCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      metaDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogImageUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ogTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      publishedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      readingTimeDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      readingTimeMinutes: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      schemaType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["DRAFT", "PUBLISHED", "ARCHIVED"] as const),
        undefined,
      ]),
      summary: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tagNames: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tags: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          active: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          articleCount: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          articleCountDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          colorCode: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          popularityScore: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              "GENERAL",
              "TECHNICAL",
              "LEVEL",
              "STRATEGY",
            ] as const),
            undefined,
          ]),
          typeDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
        })),
        undefined,
      ]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      twitterCardType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterImageUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterTitle: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      viewCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    }));

export const getGetApiV1ContentArticlesRecentResponseMock =
  (): ArticleResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      authorId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      authorNickname: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      canonicalUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      categoryId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      categoryName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      commentCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      difficulty: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "BEGINNER",
          "INTERMEDIATE",
          "ADVANCED",
        ] as const),
        undefined,
      ]),
      difficultyDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      featured: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      followable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      indexable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      likeCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      metaDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogImageUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ogTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      publishedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      readingTimeDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      readingTimeMinutes: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      schemaType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["DRAFT", "PUBLISHED", "ARCHIVED"] as const),
        undefined,
      ]),
      summary: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tagNames: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tags: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          active: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          articleCount: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          articleCountDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          colorCode: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          popularityScore: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              "GENERAL",
              "TECHNICAL",
              "LEVEL",
              "STRATEGY",
            ] as const),
            undefined,
          ]),
          typeDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
        })),
        undefined,
      ]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      twitterCardType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterImageUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterTitle: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      viewCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    }));

export const getGetApiV1ContentArticlesArticleIdRelatedResponseMock =
  (): ArticleResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      authorId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      authorNickname: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      canonicalUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      categoryId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      categoryName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      commentCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      difficulty: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "BEGINNER",
          "INTERMEDIATE",
          "ADVANCED",
        ] as const),
        undefined,
      ]),
      difficultyDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      featured: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      followable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      indexable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      likeCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      metaDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ogImageUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ogTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      publishedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      readingTimeDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      readingTimeMinutes: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      schemaType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["DRAFT", "PUBLISHED", "ARCHIVED"] as const),
        undefined,
      ]),
      summary: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tagNames: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      tags: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          active: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          articleCount: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          articleCountDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          colorCode: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          popularityScore: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              "GENERAL",
              "TECHNICAL",
              "LEVEL",
              "STRATEGY",
            ] as const),
            undefined,
          ]),
          typeDisplay: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
        })),
        undefined,
      ]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      twitterCardType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterImageUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      twitterTitle: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      viewCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    }));

export const getGetApiV1ContentCategoriesResponseMock =
  (): CategoryResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      articleCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      articleCountDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      children: faker.helpers.arrayElement([[], undefined]),
      colorCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      featuredOnHome: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      level: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      levelIndent: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      metaDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      parentName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sortOrder: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    }));

export const getGetApiV1ContentCategoriesSlugResponseMock = (
  overrideResponse: Partial<CategoryResponse> = {},
): CategoryResponse => ({
  active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  articleCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  articleCountDisplay: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  children: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      articleCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      articleCountDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      children: faker.helpers.arrayElement([[], undefined]),
      colorCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      featuredOnHome: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      level: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      levelIndent: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      metaDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      parentName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sortOrder: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    })),
    undefined,
  ]),
  colorCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  featuredOnHome: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  icon: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  level: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  levelIndent: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  metaDescription: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  parentId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  parentName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  sortOrder: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1ContentCategoriesFeaturedResponseMock =
  (): CategoryResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      articleCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      articleCountDisplay: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      children: faker.helpers.arrayElement([[], undefined]),
      colorCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      featuredOnHome: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      level: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      levelIndent: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      metaDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      parentName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoKeywords: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      seoTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sortOrder: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    }));

export const getGetApiV1ContentTagsResponseMock = (): TagResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    articleCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    articleCountDisplay: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    colorCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    popularityScore: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "GENERAL",
        "TECHNICAL",
        "LEVEL",
        "STRATEGY",
      ] as const),
      undefined,
    ]),
    typeDisplay: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
  }));

export const getGetApiV1ContentTagsPopularResponseMock = (): TagResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    articleCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    articleCountDisplay: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    colorCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    popularityScore: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    slug: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "GENERAL",
        "TECHNICAL",
        "LEVEL",
        "STRATEGY",
      ] as const),
      undefined,
    ]),
    typeDisplay: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
  }));

export const getGetApiV1ContentArticlesMockHandler = (
  overrideResponse?:
    | ArticleSearchResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ArticleSearchResponse> | ArticleSearchResponse),
) => {
  return http.get("*/api/v1/content/articles", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentArticlesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentArticlesSlugMockHandler = (
  overrideResponse?:
    | ArticleResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ArticleResponse> | ArticleResponse),
) => {
  return http.get("*/api/v1/content/articles/:slug", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentArticlesSlugResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentArticlesFeaturedMockHandler = (
  overrideResponse?:
    | ArticleResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ArticleResponse[]> | ArticleResponse[]),
) => {
  return http.get("*/api/v1/content/articles/featured", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentArticlesFeaturedResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentArticlesRecentMockHandler = (
  overrideResponse?:
    | ArticleResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ArticleResponse[]> | ArticleResponse[]),
) => {
  return http.get("*/api/v1/content/articles/recent", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentArticlesRecentResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentArticlesArticleIdRelatedMockHandler = (
  overrideResponse?:
    | ArticleResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ArticleResponse[]> | ArticleResponse[]),
) => {
  return http.get(
    "*/api/v1/content/articles/:articleId/related",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetApiV1ContentArticlesArticleIdRelatedResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getGetApiV1ContentCategoriesMockHandler = (
  overrideResponse?:
    | CategoryResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CategoryResponse[]> | CategoryResponse[]),
) => {
  return http.get("*/api/v1/content/categories", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentCategoriesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentCategoriesSlugMockHandler = (
  overrideResponse?:
    | CategoryResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CategoryResponse> | CategoryResponse),
) => {
  return http.get("*/api/v1/content/categories/:slug", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentCategoriesSlugResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentCategoriesFeaturedMockHandler = (
  overrideResponse?:
    | CategoryResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CategoryResponse[]> | CategoryResponse[]),
) => {
  return http.get("*/api/v1/content/categories/featured", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentCategoriesFeaturedResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentTagsMockHandler = (
  overrideResponse?:
    | TagResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TagResponse[]> | TagResponse[]),
) => {
  return http.get("*/api/v1/content/tags", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentTagsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1ContentTagsPopularMockHandler = (
  overrideResponse?:
    | TagResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TagResponse[]> | TagResponse[]),
) => {
  return http.get("*/api/v1/content/tags/popular", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1ContentTagsPopularResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getGetApiV1ContentArticlesMockHandler(),
  getGetApiV1ContentArticlesSlugMockHandler(),
  getGetApiV1ContentArticlesFeaturedMockHandler(),
  getGetApiV1ContentArticlesRecentMockHandler(),
  getGetApiV1ContentArticlesArticleIdRelatedMockHandler(),
  getGetApiV1ContentCategoriesMockHandler(),
  getGetApiV1ContentCategoriesSlugMockHandler(),
  getGetApiV1ContentCategoriesFeaturedMockHandler(),
  getGetApiV1ContentTagsMockHandler(),
  getGetApiV1ContentTagsPopularMockHandler(),
];
