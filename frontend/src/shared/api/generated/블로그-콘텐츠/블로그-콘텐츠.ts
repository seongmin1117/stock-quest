/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ArticleResponse,
  ArticleSearchResponse,
  CategoryResponse,
  ErrorResponse,
  GetApiV1ContentArticlesArticleIdRelatedParams,
  GetApiV1ContentArticlesFeaturedParams,
  GetApiV1ContentArticlesParams,
  GetApiV1ContentArticlesRecentParams,
  GetApiV1ContentTagsParams,
  GetApiV1ContentTagsPopularParams,
  TagResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * Í≤åÏãúÎêú Î∏îÎ°úÍ∑∏ Í∏ÄÏùÑ Í≤ÄÏÉâÌï©ÎãàÎã§
 * @summary Î∏îÎ°úÍ∑∏ Í∏Ä Í≤ÄÏÉâ
 */
export const getApiV1ContentArticles = (
  params?: GetApiV1ContentArticlesParams,
  signal?: AbortSignal,
) => {
  return apiClient<ArticleSearchResponse>({
    url: `/api/v1/content/articles`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ContentArticlesQueryKey = (
  params?: GetApiV1ContentArticlesParams,
) => {
  return [`/api/v1/content/articles`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ContentArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticles>>,
  TError = unknown,
>(
  params?: GetApiV1ContentArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticles>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentArticlesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentArticles>>
  > = ({ signal }) => getApiV1ContentArticles(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentArticles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentArticles>>
>;
export type GetApiV1ContentArticlesQueryError = unknown;

/**
 * @summary Î∏îÎ°úÍ∑∏ Í∏Ä Í≤ÄÏÉâ
 */
export const useGetApiV1ContentArticles = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticles>>,
  TError = unknown,
>(
  params?: GetApiV1ContentArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticles>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentArticlesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ïä¨Îü¨Í∑∏Î°ú ÌäπÏ†ï Í∏ÄÏùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Í∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getApiV1ContentArticlesSlug = (
  slug: string,
  signal?: AbortSignal,
) => {
  return apiClient<ArticleResponse>({
    url: `/api/v1/content/articles/${slug}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ContentArticlesSlugQueryKey = (slug: string) => {
  return [`/api/v1/content/articles/${slug}`] as const;
};

export const getGetApiV1ContentArticlesSlugQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesSlug>>,
  TError = ErrorResponse,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesSlug>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentArticlesSlugQueryKey(slug);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentArticlesSlug>>
  > = ({ signal }) => getApiV1ContentArticlesSlug(slug, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!slug,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentArticlesSlug>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentArticlesSlugQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentArticlesSlug>>
>;
export type GetApiV1ContentArticlesSlugQueryError = ErrorResponse;

/**
 * @summary Í∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const useGetApiV1ContentArticlesSlug = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesSlug>>,
  TError = ErrorResponse,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesSlug>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentArticlesSlugQueryOptions(
    slug,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ï∂îÏ≤ú Í∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ï∂îÏ≤ú Í∏Ä Î™©Î°ù
 */
export const getApiV1ContentArticlesFeatured = (
  params?: GetApiV1ContentArticlesFeaturedParams,
  signal?: AbortSignal,
) => {
  return apiClient<ArticleResponse[]>({
    url: `/api/v1/content/articles/featured`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ContentArticlesFeaturedQueryKey = (
  params?: GetApiV1ContentArticlesFeaturedParams,
) => {
  return [
    `/api/v1/content/articles/featured`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ContentArticlesFeaturedQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesFeatured>>,
  TError = unknown,
>(
  params?: GetApiV1ContentArticlesFeaturedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesFeatured>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1ContentArticlesFeaturedQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentArticlesFeatured>>
  > = ({ signal }) => getApiV1ContentArticlesFeatured(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentArticlesFeatured>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentArticlesFeaturedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentArticlesFeatured>>
>;
export type GetApiV1ContentArticlesFeaturedQueryError = unknown;

/**
 * @summary Ï∂îÏ≤ú Í∏Ä Î™©Î°ù
 */
export const useGetApiV1ContentArticlesFeatured = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesFeatured>>,
  TError = unknown,
>(
  params?: GetApiV1ContentArticlesFeaturedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesFeatured>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentArticlesFeaturedQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÏµúÏã† Í∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÏµúÏã† Í∏Ä Î™©Î°ù
 */
export const getApiV1ContentArticlesRecent = (
  params?: GetApiV1ContentArticlesRecentParams,
  signal?: AbortSignal,
) => {
  return apiClient<ArticleResponse[]>({
    url: `/api/v1/content/articles/recent`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ContentArticlesRecentQueryKey = (
  params?: GetApiV1ContentArticlesRecentParams,
) => {
  return [
    `/api/v1/content/articles/recent`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ContentArticlesRecentQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesRecent>>,
  TError = unknown,
>(
  params?: GetApiV1ContentArticlesRecentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesRecent>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentArticlesRecentQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentArticlesRecent>>
  > = ({ signal }) => getApiV1ContentArticlesRecent(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentArticlesRecent>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentArticlesRecentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentArticlesRecent>>
>;
export type GetApiV1ContentArticlesRecentQueryError = unknown;

/**
 * @summary ÏµúÏã† Í∏Ä Î™©Î°ù
 */
export const useGetApiV1ContentArticlesRecent = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesRecent>>,
  TError = unknown,
>(
  params?: GetApiV1ContentArticlesRecentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesRecent>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentArticlesRecentQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÌäπÏ†ï Í∏ÄÍ≥º Í¥ÄÎ†®Îêú Í∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Í¥ÄÎ†® Í∏Ä Î™©Î°ù
 */
export const getApiV1ContentArticlesArticleIdRelated = (
  articleId: number,
  params?: GetApiV1ContentArticlesArticleIdRelatedParams,
  signal?: AbortSignal,
) => {
  return apiClient<ArticleResponse[]>({
    url: `/api/v1/content/articles/${articleId}/related`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ContentArticlesArticleIdRelatedQueryKey = (
  articleId: number,
  params?: GetApiV1ContentArticlesArticleIdRelatedParams,
) => {
  return [
    `/api/v1/content/articles/${articleId}/related`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ContentArticlesArticleIdRelatedQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesArticleIdRelated>>,
  TError = unknown,
>(
  articleId: number,
  params?: GetApiV1ContentArticlesArticleIdRelatedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesArticleIdRelated>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1ContentArticlesArticleIdRelatedQueryKey(articleId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentArticlesArticleIdRelated>>
  > = ({ signal }) =>
    getApiV1ContentArticlesArticleIdRelated(articleId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!articleId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentArticlesArticleIdRelated>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentArticlesArticleIdRelatedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentArticlesArticleIdRelated>>
>;
export type GetApiV1ContentArticlesArticleIdRelatedQueryError = unknown;

/**
 * @summary Í¥ÄÎ†® Í∏Ä Î™©Î°ù
 */
export const useGetApiV1ContentArticlesArticleIdRelated = <
  TData = Awaited<ReturnType<typeof getApiV1ContentArticlesArticleIdRelated>>,
  TError = unknown,
>(
  articleId: number,
  params?: GetApiV1ContentArticlesArticleIdRelatedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentArticlesArticleIdRelated>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentArticlesArticleIdRelatedQueryOptions(
    articleId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Î™®Îì† ÌôúÏÑ± Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
 */
export const getApiV1ContentCategories = (signal?: AbortSignal) => {
  return apiClient<CategoryResponse[]>({
    url: `/api/v1/content/categories`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ContentCategoriesQueryKey = () => {
  return [`/api/v1/content/categories`] as const;
};

export const getGetApiV1ContentCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ContentCategories>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentCategories>>
  > = ({ signal }) => getApiV1ContentCategories(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentCategories>>
>;
export type GetApiV1ContentCategoriesQueryError = unknown;

/**
 * @summary Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
 */
export const useGetApiV1ContentCategories = <
  TData = Awaited<ReturnType<typeof getApiV1ContentCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ContentCategories>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentCategoriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ïä¨Îü¨Í∑∏Î°ú ÌäπÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getApiV1ContentCategoriesSlug = (
  slug: string,
  signal?: AbortSignal,
) => {
  return apiClient<CategoryResponse>({
    url: `/api/v1/content/categories/${slug}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ContentCategoriesSlugQueryKey = (slug: string) => {
  return [`/api/v1/content/categories/${slug}`] as const;
};

export const getGetApiV1ContentCategoriesSlugQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentCategoriesSlug>>,
  TError = ErrorResponse,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentCategoriesSlug>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentCategoriesSlugQueryKey(slug);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentCategoriesSlug>>
  > = ({ signal }) => getApiV1ContentCategoriesSlug(slug, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!slug,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentCategoriesSlug>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentCategoriesSlugQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentCategoriesSlug>>
>;
export type GetApiV1ContentCategoriesSlugQueryError = ErrorResponse;

/**
 * @summary Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const useGetApiV1ContentCategoriesSlug = <
  TData = Awaited<ReturnType<typeof getApiV1ContentCategoriesSlug>>,
  TError = ErrorResponse,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentCategoriesSlug>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentCategoriesSlugQueryOptions(
    slug,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÌôàÌéòÏù¥ÏßÄ ÌëúÏãúÏö© Ï∂îÏ≤ú Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ï∂îÏ≤ú Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
 */
export const getApiV1ContentCategoriesFeatured = (signal?: AbortSignal) => {
  return apiClient<CategoryResponse[]>({
    url: `/api/v1/content/categories/featured`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ContentCategoriesFeaturedQueryKey = () => {
  return [`/api/v1/content/categories/featured`] as const;
};

export const getGetApiV1ContentCategoriesFeaturedQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentCategoriesFeatured>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ContentCategoriesFeatured>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentCategoriesFeaturedQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentCategoriesFeatured>>
  > = ({ signal }) => getApiV1ContentCategoriesFeatured(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentCategoriesFeatured>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentCategoriesFeaturedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentCategoriesFeatured>>
>;
export type GetApiV1ContentCategoriesFeaturedQueryError = unknown;

/**
 * @summary Ï∂îÏ≤ú Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
 */
export const useGetApiV1ContentCategoriesFeatured = <
  TData = Awaited<ReturnType<typeof getApiV1ContentCategoriesFeatured>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ContentCategoriesFeatured>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetApiV1ContentCategoriesFeaturedQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÌÉúÍ∑∏ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÌÉúÍ∑∏ Î™©Î°ù
 */
export const getApiV1ContentTags = (
  params?: GetApiV1ContentTagsParams,
  signal?: AbortSignal,
) => {
  return apiClient<TagResponse[]>({
    url: `/api/v1/content/tags`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ContentTagsQueryKey = (
  params?: GetApiV1ContentTagsParams,
) => {
  return [`/api/v1/content/tags`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ContentTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentTags>>,
  TError = unknown,
>(
  params?: GetApiV1ContentTagsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentTags>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentTagsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentTags>>
  > = ({ signal }) => getApiV1ContentTags(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentTags>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentTags>>
>;
export type GetApiV1ContentTagsQueryError = unknown;

/**
 * @summary ÌÉúÍ∑∏ Î™©Î°ù
 */
export const useGetApiV1ContentTags = <
  TData = Awaited<ReturnType<typeof getApiV1ContentTags>>,
  TError = unknown,
>(
  params?: GetApiV1ContentTagsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentTags>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentTagsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ïù∏Í∏∞ ÌÉúÍ∑∏ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Ïù∏Í∏∞ ÌÉúÍ∑∏ Î™©Î°ù
 */
export const getApiV1ContentTagsPopular = (
  params?: GetApiV1ContentTagsPopularParams,
  signal?: AbortSignal,
) => {
  return apiClient<TagResponse[]>({
    url: `/api/v1/content/tags/popular`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ContentTagsPopularQueryKey = (
  params?: GetApiV1ContentTagsPopularParams,
) => {
  return [`/api/v1/content/tags/popular`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ContentTagsPopularQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ContentTagsPopular>>,
  TError = unknown,
>(
  params?: GetApiV1ContentTagsPopularParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentTagsPopular>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ContentTagsPopularQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ContentTagsPopular>>
  > = ({ signal }) => getApiV1ContentTagsPopular(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ContentTagsPopular>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ContentTagsPopularQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ContentTagsPopular>>
>;
export type GetApiV1ContentTagsPopularQueryError = unknown;

/**
 * @summary Ïù∏Í∏∞ ÌÉúÍ∑∏ Î™©Î°ù
 */
export const useGetApiV1ContentTagsPopular = <
  TData = Awaited<ReturnType<typeof getApiV1ContentTagsPopular>>,
  TError = unknown,
>(
  params?: GetApiV1ContentTagsPopularParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ContentTagsPopular>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ContentTagsPopularQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
