/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  RiskAlertConfigResponse,
  RiskAlertsResponse,
  RiskDashboardResponse,
  RiskLimitsUpdateResponse,
  VaRResponse,
} from ".././model";

export const getGetApiV1RiskPortfoliosPortfolioIdVarResponseMock = (
  overrideResponse: Partial<VaRResponse> = {},
): VaRResponse => ({
  calculatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  confidenceLevel: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  percentage: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  portfolioId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  riskRating: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["LOW", "MEDIUM", "HIGH", "CRITICAL"] as const),
    undefined,
  ]),
  timeHorizon: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetApiV1RiskAlertsResponseMock = (
  overrideResponse: Partial<RiskAlertsResponse> = {},
): RiskAlertsResponse => ({
  activeCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  alerts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alertType: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "VAR_BREACH",
          "CONCENTRATION_RISK",
          "VOLATILITY_SPIKE",
          "CORRELATION_RISK",
        ] as const),
        undefined,
      ]),
      currentValue: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      portfolioId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      resolvedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      severity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL",
        ] as const),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ACTIVE",
          "RESOLVED",
          "ACKNOWLEDGED",
        ] as const),
        undefined,
      ]),
      thresholdValue: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      triggeredAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    })),
    undefined,
  ]),
  totalCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1RiskDashboardResponseMock = (
  overrideResponse: Partial<RiskDashboardResponse> = {},
): RiskDashboardResponse => ({
  activeAlerts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alertType: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "VAR_BREACH",
          "CONCENTRATION_RISK",
          "VOLATILITY_SPIKE",
          "CORRELATION_RISK",
        ] as const),
        undefined,
      ]),
      currentValue: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      portfolioId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      resolvedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      severity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL",
        ] as const),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ACTIVE",
          "RESOLVED",
          "ACKNOWLEDGED",
        ] as const),
        undefined,
      ]),
      thresholdValue: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      triggeredAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    })),
    undefined,
  ]),
  concentrationRisk: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  maxDrawdown: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  overallRiskScore: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  portfolioVolatility: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  riskBreakdown: faker.helpers.arrayElement([
    {
      concentrationRisk: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      creditRisk: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      liquidityRisk: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      marketRisk: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  riskRating: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["LOW", "MEDIUM", "HIGH", "CRITICAL"] as const),
    undefined,
  ]),
  sharpeRatio: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  totalPortfolioValue: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  var95: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  var99: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getPostApiV1RiskAlertsConfigureResponseMock = (
  overrideResponse: Partial<RiskAlertConfigResponse> = {},
): RiskAlertConfigResponse => ({
  configId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  configured: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  portfolioId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutApiV1RiskLimitsPortfolioIdResponseMock = (
  overrideResponse: Partial<RiskLimitsUpdateResponse> = {},
): RiskLimitsUpdateResponse => ({
  appliedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  portfolioId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updated: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetApiV1RiskPortfoliosPortfolioIdVarMockHandler = (
  overrideResponse?:
    | VaRResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<VaRResponse> | VaRResponse),
) => {
  return http.get("*/api/v1/risk/portfolios/:portfolioId/var", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1RiskPortfoliosPortfolioIdVarResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1RiskAlertsMockHandler = (
  overrideResponse?:
    | RiskAlertsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RiskAlertsResponse> | RiskAlertsResponse),
) => {
  return http.get("*/api/v1/risk/alerts", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1RiskAlertsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiV1RiskDashboardMockHandler = (
  overrideResponse?:
    | RiskDashboardResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RiskDashboardResponse> | RiskDashboardResponse),
) => {
  return http.get("*/api/v1/risk/dashboard", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1RiskDashboardResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiV1RiskAlertsConfigureMockHandler = (
  overrideResponse?:
    | RiskAlertConfigResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RiskAlertConfigResponse> | RiskAlertConfigResponse),
) => {
  return http.post("*/api/v1/risk/alerts/configure", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiV1RiskAlertsConfigureResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutApiV1RiskLimitsPortfolioIdMockHandler = (
  overrideResponse?:
    | RiskLimitsUpdateResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<RiskLimitsUpdateResponse> | RiskLimitsUpdateResponse),
) => {
  return http.put("*/api/v1/risk/limits/:portfolioId", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutApiV1RiskLimitsPortfolioIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getGetApiV1RiskPortfoliosPortfolioIdVarMockHandler(),
  getGetApiV1RiskAlertsMockHandler(),
  getGetApiV1RiskDashboardMockHandler(),
  getPostApiV1RiskAlertsConfigureMockHandler(),
  getPutApiV1RiskLimitsPortfolioIdMockHandler(),
];
