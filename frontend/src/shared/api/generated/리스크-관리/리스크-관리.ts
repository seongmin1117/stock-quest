/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ErrorResponse,
  GetApiV1RiskAlertsParams,
  GetApiV1RiskPortfoliosPortfolioIdVarParams,
  RiskAlertConfigRequest,
  RiskAlertConfigResponse,
  RiskAlertsResponse,
  RiskDashboardResponse,
  RiskLimitsUpdateRequest,
  RiskLimitsUpdateResponse,
  VaRResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * Value at Risk (VaR)를 계산합니다
 * @summary 포트폴리오 VaR 계산
 */
export const getApiV1RiskPortfoliosPortfolioIdVar = (
  portfolioId: number,
  params?: GetApiV1RiskPortfoliosPortfolioIdVarParams,
  signal?: AbortSignal,
) => {
  return apiClient<VaRResponse>({
    url: `/api/v1/risk/portfolios/${portfolioId}/var`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1RiskPortfoliosPortfolioIdVarQueryKey = (
  portfolioId: number,
  params?: GetApiV1RiskPortfoliosPortfolioIdVarParams,
) => {
  return [
    `/api/v1/risk/portfolios/${portfolioId}/var`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1RiskPortfoliosPortfolioIdVarQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1RiskPortfoliosPortfolioIdVar>>,
  TError = ErrorResponse,
>(
  portfolioId: number,
  params?: GetApiV1RiskPortfoliosPortfolioIdVarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RiskPortfoliosPortfolioIdVar>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1RiskPortfoliosPortfolioIdVarQueryKey(portfolioId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1RiskPortfoliosPortfolioIdVar>>
  > = ({ signal }) =>
    getApiV1RiskPortfoliosPortfolioIdVar(portfolioId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!portfolioId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1RiskPortfoliosPortfolioIdVar>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RiskPortfoliosPortfolioIdVarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1RiskPortfoliosPortfolioIdVar>>
>;
export type GetApiV1RiskPortfoliosPortfolioIdVarQueryError = ErrorResponse;

/**
 * @summary 포트폴리오 VaR 계산
 */
export const useGetApiV1RiskPortfoliosPortfolioIdVar = <
  TData = Awaited<ReturnType<typeof getApiV1RiskPortfoliosPortfolioIdVar>>,
  TError = ErrorResponse,
>(
  portfolioId: number,
  params?: GetApiV1RiskPortfoliosPortfolioIdVarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RiskPortfoliosPortfolioIdVar>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RiskPortfoliosPortfolioIdVarQueryOptions(
    portfolioId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 활성 리스크 알림 목록을 조회합니다
 * @summary 리스크 알림 조회
 */
export const getApiV1RiskAlerts = (
  params?: GetApiV1RiskAlertsParams,
  signal?: AbortSignal,
) => {
  return apiClient<RiskAlertsResponse>({
    url: `/api/v1/risk/alerts`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1RiskAlertsQueryKey = (
  params?: GetApiV1RiskAlertsParams,
) => {
  return [`/api/v1/risk/alerts`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1RiskAlertsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1RiskAlerts>>,
  TError = ErrorResponse,
>(
  params?: GetApiV1RiskAlertsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RiskAlerts>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1RiskAlertsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1RiskAlerts>>
  > = ({ signal }) => getApiV1RiskAlerts(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1RiskAlerts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RiskAlertsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1RiskAlerts>>
>;
export type GetApiV1RiskAlertsQueryError = ErrorResponse;

/**
 * @summary 리스크 알림 조회
 */
export const useGetApiV1RiskAlerts = <
  TData = Awaited<ReturnType<typeof getApiV1RiskAlerts>>,
  TError = ErrorResponse,
>(
  params?: GetApiV1RiskAlertsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RiskAlerts>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RiskAlertsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 전체 리스크 관리 대시보드 데이터를 조회합니다
 * @summary 리스크 대시보드 데이터 조회
 */
export const getApiV1RiskDashboard = (signal?: AbortSignal) => {
  return apiClient<RiskDashboardResponse>({
    url: `/api/v1/risk/dashboard`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1RiskDashboardQueryKey = () => {
  return [`/api/v1/risk/dashboard`] as const;
};

export const getGetApiV1RiskDashboardQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1RiskDashboard>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1RiskDashboard>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1RiskDashboardQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1RiskDashboard>>
  > = ({ signal }) => getApiV1RiskDashboard(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1RiskDashboard>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RiskDashboardQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1RiskDashboard>>
>;
export type GetApiV1RiskDashboardQueryError = ErrorResponse;

/**
 * @summary 리스크 대시보드 데이터 조회
 */
export const useGetApiV1RiskDashboard = <
  TData = Awaited<ReturnType<typeof getApiV1RiskDashboard>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1RiskDashboard>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RiskDashboardQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 리스크 알림 임계값을 설정합니다
 * @summary 리스크 알림 설정
 */
export const postApiV1RiskAlertsConfigure = (
  riskAlertConfigRequest: RiskAlertConfigRequest,
) => {
  return apiClient<RiskAlertConfigResponse>({
    url: `/api/v1/risk/alerts/configure`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: riskAlertConfigRequest,
  });
};

export const getPostApiV1RiskAlertsConfigureMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1RiskAlertsConfigure>>,
    TError,
    { data: RiskAlertConfigRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1RiskAlertsConfigure>>,
  TError,
  { data: RiskAlertConfigRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1RiskAlertsConfigure>>,
    { data: RiskAlertConfigRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1RiskAlertsConfigure(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1RiskAlertsConfigureMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1RiskAlertsConfigure>>
>;
export type PostApiV1RiskAlertsConfigureMutationBody = RiskAlertConfigRequest;
export type PostApiV1RiskAlertsConfigureMutationError = ErrorResponse;

/**
 * @summary 리스크 알림 설정
 */
export const usePostApiV1RiskAlertsConfigure = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1RiskAlertsConfigure>>,
    TError,
    { data: RiskAlertConfigRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1RiskAlertsConfigure>>,
  TError,
  { data: RiskAlertConfigRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiV1RiskAlertsConfigureMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 포트폴리오의 리스크 한도를 업데이트합니다
 * @summary 리스크 한도 업데이트
 */
export const putApiV1RiskLimitsPortfolioId = (
  portfolioId: number,
  riskLimitsUpdateRequest: RiskLimitsUpdateRequest,
) => {
  return apiClient<RiskLimitsUpdateResponse>({
    url: `/api/v1/risk/limits/${portfolioId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: riskLimitsUpdateRequest,
  });
};

export const getPutApiV1RiskLimitsPortfolioIdMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RiskLimitsPortfolioId>>,
    TError,
    { portfolioId: number; data: RiskLimitsUpdateRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1RiskLimitsPortfolioId>>,
  TError,
  { portfolioId: number; data: RiskLimitsUpdateRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1RiskLimitsPortfolioId>>,
    { portfolioId: number; data: RiskLimitsUpdateRequest }
  > = (props) => {
    const { portfolioId, data } = props ?? {};

    return putApiV1RiskLimitsPortfolioId(portfolioId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1RiskLimitsPortfolioIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1RiskLimitsPortfolioId>>
>;
export type PutApiV1RiskLimitsPortfolioIdMutationBody = RiskLimitsUpdateRequest;
export type PutApiV1RiskLimitsPortfolioIdMutationError = ErrorResponse;

/**
 * @summary 리스크 한도 업데이트
 */
export const usePutApiV1RiskLimitsPortfolioId = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RiskLimitsPortfolioId>>,
    TError,
    { portfolioId: number; data: RiskLimitsUpdateRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1RiskLimitsPortfolioId>>,
  TError,
  { portfolioId: number; data: RiskLimitsUpdateRequest },
  TContext
> => {
  const mutationOptions =
    getPutApiV1RiskLimitsPortfolioIdMutationOptions(options);

  return useMutation(mutationOptions);
};
