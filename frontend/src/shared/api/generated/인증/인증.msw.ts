/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * 모의 투자 챌린지 학습 플랫폼 API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { AuthResponse } from ".././model";

export const getPostApiAuthSignupResponseMock = (
  overrideResponse: Partial<AuthResponse> = {},
): AuthResponse => ({
  token: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  user: faker.helpers.arrayElement([
    {
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiAuthLoginResponseMock = (
  overrideResponse: Partial<AuthResponse> = {},
): AuthResponse => ({
  token: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  user: faker.helpers.arrayElement([
    {
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiAuthSignupMockHandler = (
  overrideResponse?:
    | AuthResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AuthResponse> | AuthResponse),
) => {
  return http.post("*/api/auth/signup", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiAuthSignupResponseMock(),
      ),
      {
        status: 201,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiAuthLoginMockHandler = (
  overrideResponse?:
    | AuthResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AuthResponse> | AuthResponse),
) => {
  return http.post("*/api/auth/login", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiAuthLoginResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getPostApiAuthSignupMockHandler(),
  getPostApiAuthLoginMockHandler(),
];
