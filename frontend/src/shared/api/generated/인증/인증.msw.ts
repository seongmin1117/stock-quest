/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { AuthResponse, PostApiAuthLogout200 } from ".././model";

export const getPostApiAuthSignupResponseMock = (
  overrideResponse: Partial<AuthResponse> = {},
): AuthResponse => ({
  accessToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  accessTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
  nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiAuthLoginResponseMock = (
  overrideResponse: Partial<AuthResponse> = {},
): AuthResponse => ({
  accessToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  accessTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
  nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiAuthMeResponseMock = (
  overrideResponse: Partial<AuthResponse> = {},
): AuthResponse => ({
  accessToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  accessTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
  nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiAuthRefreshResponseMock = (
  overrideResponse: Partial<AuthResponse> = {},
): AuthResponse => ({
  accessToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  accessTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
  nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  refreshTokenExpiresAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiAuthLogoutResponseMock = (
  overrideResponse: Partial<PostApiAuthLogout200> = {},
): PostApiAuthLogout200 => ({
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPostApiAuthSignupMockHandler = (
  overrideResponse?:
    | AuthResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AuthResponse> | AuthResponse),
) => {
  return http.post("*/api/auth/signup", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiAuthSignupResponseMock(),
      ),
      {
        status: 201,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiAuthLoginMockHandler = (
  overrideResponse?:
    | AuthResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AuthResponse> | AuthResponse),
) => {
  return http.post("*/api/auth/login", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiAuthLoginResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiAuthMeMockHandler = (
  overrideResponse?:
    | AuthResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<AuthResponse> | AuthResponse),
) => {
  return http.get("*/api/auth/me", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiAuthMeResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiAuthRefreshMockHandler = (
  overrideResponse?:
    | AuthResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AuthResponse> | AuthResponse),
) => {
  return http.post("*/api/auth/refresh", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiAuthRefreshResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiAuthLogoutMockHandler = (
  overrideResponse?:
    | PostApiAuthLogout200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostApiAuthLogout200> | PostApiAuthLogout200),
) => {
  return http.post("*/api/auth/logout", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiAuthLogoutResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getPostApiAuthSignupMockHandler(),
  getPostApiAuthLoginMockHandler(),
  getGetApiAuthMeMockHandler(),
  getPostApiAuthRefreshMockHandler(),
  getPostApiAuthLogoutMockHandler(),
];
