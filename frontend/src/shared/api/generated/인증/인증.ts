/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AuthResponse,
  ErrorResponse,
  LoginRequest,
  LogoutRequest,
  PostApiAuthLogout200,
  RefreshTokenRequest,
  SignupRequest,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * ÏÉàÎ°úÏö¥ ÏÇ¨Ïö©Ïûê Í≥ÑÏ†ïÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const postApiAuthSignup = (signupRequest: SignupRequest) => {
  return apiClient<AuthResponse>({
    url: `/api/auth/signup`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: signupRequest,
  });
};

export const getPostApiAuthSignupMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    { data: SignupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthSignup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthSignup>>
>;
export type PostApiAuthSignupMutationBody = SignupRequest;
export type PostApiAuthSignupMutationError = ErrorResponse;

/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const usePostApiAuthSignup = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const mutationOptions = getPostApiAuthSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ÌïòÎ©∞, JWT ÌÜ†ÌÅ∞ÏùÑ Î∞úÍ∏âÎ∞õÏäµÎãàÎã§
 * @summary Î°úÍ∑∏Ïù∏
 */
export const postApiAuthLogin = (loginRequest: LoginRequest) => {
  return apiClient<AuthResponse>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginRequest,
  });
};

export const getPostApiAuthLoginMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthLoginMutationBody = LoginRequest;
export type PostApiAuthLoginMutationError = ErrorResponse;

/**
 * @summary Î°úÍ∑∏Ïù∏
 */
export const usePostApiAuthLogin = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * JWT ÌÜ†ÌÅ∞ Í∏∞Î∞òÏúºÎ°ú ÌòÑÏû¨ Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */
export const getApiAuthMe = (signal?: AbortSignal) => {
  return apiClient<AuthResponse>({
    url: `/api/auth/me`,
    method: "GET",
    signal,
  });
};

export const getGetApiAuthMeQueryKey = () => {
  return [`/api/auth/me`] as const;
};

export const getGetApiAuthMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAuthMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthMe>>> = ({
    signal,
  }) => getApiAuthMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiAuthMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthMe>>
>;
export type GetApiAuthMeQueryError = ErrorResponse;

/**
 * @summary ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */
export const useGetApiAuthMe = <
  TData = Awaited<ReturnType<typeof getApiAuthMe>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiAuthMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÉàÎ°úÏö¥ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏùÑ Î∞úÍ∏âÎ∞õÏäµÎãàÎã§
 * @summary ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const postApiAuthRefresh = (
  refreshTokenRequest: RefreshTokenRequest,
) => {
  return apiClient<AuthResponse>({
    url: `/api/auth/refresh`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenRequest,
  });
};

export const getPostApiAuthRefreshMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthRefresh>>,
    TError,
    { data: RefreshTokenRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthRefresh>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthRefresh>>,
    { data: RefreshTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthRefresh(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthRefresh>>
>;
export type PostApiAuthRefreshMutationBody = RefreshTokenRequest;
export type PostApiAuthRefreshMutationError = ErrorResponse;

/**
 * @summary ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const usePostApiAuthRefresh = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthRefresh>>,
    TError,
    { data: RefreshTokenRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthRefresh>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationOptions = getPostApiAuthRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÌòÑÏû¨ ÏÑ∏ÏÖòÏùÑ Ï¢ÖÎ£åÌïòÍ≥† ÌÜ†ÌÅ∞ÏùÑ Î¨¥Ìö®ÌôîÌï©ÎãàÎã§
 * @summary Î°úÍ∑∏ÏïÑÏõÉ
 */
export const postApiAuthLogout = (logoutRequest?: LogoutRequest) => {
  return apiClient<PostApiAuthLogout200>({
    url: `/api/auth/logout`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: logoutRequest,
  });
};

export const getPostApiAuthLogoutMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    TError,
    { data: LogoutRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError,
  { data: LogoutRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    { data: LogoutRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogout(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogout>>
>;
export type PostApiAuthLogoutMutationBody = LogoutRequest;
export type PostApiAuthLogoutMutationError = ErrorResponse;

/**
 * @summary Î°úÍ∑∏ÏïÑÏõÉ
 */
export const usePostApiAuthLogout = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    TError,
    { data: LogoutRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError,
  { data: LogoutRequest },
  TContext
> => {
  const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
