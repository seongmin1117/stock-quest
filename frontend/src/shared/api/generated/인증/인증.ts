/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Î™®Ïùò Ìà¨Ïûê Ï±åÎ¶∞ÏßÄ ÌïôÏäµ ÌîåÎû´Ìèº API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  AuthResponse,
  ErrorResponse,
  LoginRequest,
  SignupRequest,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * ÏÉàÎ°úÏö¥ ÏÇ¨Ïö©Ïûê Í≥ÑÏ†ïÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const postApiAuthSignup = (signupRequest: SignupRequest) => {
  return apiClient<AuthResponse>({
    url: `/api/auth/signup`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: signupRequest,
  });
};

export const getPostApiAuthSignupMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    { data: SignupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthSignup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthSignup>>
>;
export type PostApiAuthSignupMutationBody = SignupRequest;
export type PostApiAuthSignupMutationError = ErrorResponse;

/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const usePostApiAuthSignup = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const mutationOptions = getPostApiAuthSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏Ìï©ÎãàÎã§
 * @summary Î°úÍ∑∏Ïù∏
 */
export const postApiAuthLogin = (loginRequest: LoginRequest) => {
  return apiClient<AuthResponse>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginRequest,
  });
};

export const getPostApiAuthLoginMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthLoginMutationBody = LoginRequest;
export type PostApiAuthLoginMutationError = ErrorResponse;

/**
 * @summary Î°úÍ∑∏Ïù∏
 */
export const usePostApiAuthLogin = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
