/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * 모의 투자 챌린지 학습 플랫폼 API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  ChallengeResultResponse,
  OrderResponse,
  PortfolioResponse,
} from ".././model";

export const getPostApiSessionsSessionIdOrdersResponseMock = (
  overrideResponse: Partial<OrderResponse> = {},
): OrderResponse => ({
  executedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  executedPrice: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  instrumentKey: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  limitPrice: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  orderedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  orderType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["MARKET", "LIMIT"] as const),
    undefined,
  ]),
  quantity: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  side: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["BUY", "SELL"] as const),
    undefined,
  ]),
  slippageRate: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["PENDING", "EXECUTED", "CANCELLED"] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiSessionsSessionIdOrdersResponseMock =
  (): OrderResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      executedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      executedPrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      instrumentKey: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      limitPrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      orderedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      orderType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["MARKET", "LIMIT"] as const),
        undefined,
      ]),
      quantity: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      side: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["BUY", "SELL"] as const),
        undefined,
      ]),
      slippageRate: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "PENDING",
          "EXECUTED",
          "CANCELLED",
        ] as const),
        undefined,
      ]),
    }));

export const getGetApiSessionsSessionIdPortfolioResponseMock = (
  overrideResponse: Partial<PortfolioResponse> = {},
): PortfolioResponse => ({
  currentBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  positions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      averagePrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      currentPrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      currentValue: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      hiddenName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      instrumentKey: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      quantity: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      totalCost: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      unrealizedPnL: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  returnPercentage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sessionId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPnL: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalValue: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiSessionsSessionIdCloseResponseMock = (
  overrideResponse: Partial<ChallengeResultResponse> = {},
): ChallengeResultResponse => ({
  finalBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  portfolio: faker.helpers.arrayElement([
    {
      currentBalance: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      positions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          averagePrice: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          currentPrice: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          currentValue: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          hiddenName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          instrumentKey: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          quantity: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          totalCost: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          unrealizedPnL: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
        })),
        undefined,
      ]),
      returnPercentage: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sessionId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      totalPnL: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      totalValue: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  rank: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  returnPercentage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  revealedInstruments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      actualName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      actualTicker: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      instrumentKey: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  sessionId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPnL: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiSessionsSessionIdOrdersMockHandler = (
  overrideResponse?:
    | OrderResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<OrderResponse> | OrderResponse),
) => {
  return http.post("*/api/sessions/:sessionId/orders", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiSessionsSessionIdOrdersResponseMock(),
      ),
      {
        status: 201,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiSessionsSessionIdOrdersMockHandler = (
  overrideResponse?:
    | OrderResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OrderResponse[]> | OrderResponse[]),
) => {
  return http.get("*/api/sessions/:sessionId/orders", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiSessionsSessionIdOrdersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetApiSessionsSessionIdPortfolioMockHandler = (
  overrideResponse?:
    | PortfolioResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PortfolioResponse> | PortfolioResponse),
) => {
  return http.get("*/api/sessions/:sessionId/portfolio", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiSessionsSessionIdPortfolioResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiSessionsSessionIdCloseMockHandler = (
  overrideResponse?:
    | ChallengeResultResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ChallengeResultResponse> | ChallengeResultResponse),
) => {
  return http.post("*/api/sessions/:sessionId/close", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiSessionsSessionIdCloseResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getPostApiSessionsSessionIdOrdersMockHandler(),
  getGetApiSessionsSessionIdOrdersMockHandler(),
  getGetApiSessionsSessionIdPortfolioMockHandler(),
  getPostApiSessionsSessionIdCloseMockHandler(),
];
