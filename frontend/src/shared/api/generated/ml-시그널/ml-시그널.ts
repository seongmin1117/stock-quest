/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ActiveSignalsResponse,
  BatchSignalRequest,
  BatchSignalResponse,
  ErrorResponse,
  FilterSignalsRequest,
  FilteredSignalResponse,
  GetApiV1MlSignalsActiveParams,
  PerformanceUpdateRequest,
  PerformanceUpdateResponse,
  TradingSignalResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * Îã®Ïùº Ïã¨Î≥ºÏóê ÎåÄÌïú ML Í∏∞Î∞ò Ìä∏Î†àÏù¥Îî© ÏãúÍ∑∏ÎÑêÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§
 * @summary ML Ìä∏Î†àÏù¥Îî© ÏãúÍ∑∏ÎÑê ÏÉùÏÑ±
 */
export const getApiV1MlSignalsGenerateSymbol = (
  symbol: string,
  signal?: AbortSignal,
) => {
  return apiClient<TradingSignalResponse>({
    url: `/api/v1/ml/signals/generate/${symbol}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MlSignalsGenerateSymbolQueryKey = (symbol: string) => {
  return [`/api/v1/ml/signals/generate/${symbol}`] as const;
};

export const getGetApiV1MlSignalsGenerateSymbolQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MlSignalsGenerateSymbol>>,
  TError = ErrorResponse,
>(
  symbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MlSignalsGenerateSymbol>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1MlSignalsGenerateSymbolQueryKey(symbol);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MlSignalsGenerateSymbol>>
  > = ({ signal }) => getApiV1MlSignalsGenerateSymbol(symbol, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!symbol,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MlSignalsGenerateSymbol>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MlSignalsGenerateSymbolQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MlSignalsGenerateSymbol>>
>;
export type GetApiV1MlSignalsGenerateSymbolQueryError = ErrorResponse;

/**
 * @summary ML Ìä∏Î†àÏù¥Îî© ÏãúÍ∑∏ÎÑê ÏÉùÏÑ±
 */
export const useGetApiV1MlSignalsGenerateSymbol = <
  TData = Awaited<ReturnType<typeof getApiV1MlSignalsGenerateSymbol>>,
  TError = ErrorResponse,
>(
  symbol: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MlSignalsGenerateSymbol>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MlSignalsGenerateSymbolQueryOptions(
    symbol,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Î≥µÏàò Ïã¨Î≥ºÏóê ÎåÄÌïú ML Ìä∏Î†àÏù¥Îî© ÏãúÍ∑∏ÎÑêÏùÑ Î∞∞ÏπòÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§
 * @summary Î∞∞Ïπò ML ÏãúÍ∑∏ÎÑê ÏÉùÏÑ±
 */
export const postApiV1MlSignalsGenerateBatch = (
  batchSignalRequest: BatchSignalRequest,
) => {
  return apiClient<BatchSignalResponse>({
    url: `/api/v1/ml/signals/generate/batch`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: batchSignalRequest,
  });
};

export const getPostApiV1MlSignalsGenerateBatchMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MlSignalsGenerateBatch>>,
    TError,
    { data: BatchSignalRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MlSignalsGenerateBatch>>,
  TError,
  { data: BatchSignalRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MlSignalsGenerateBatch>>,
    { data: BatchSignalRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1MlSignalsGenerateBatch(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MlSignalsGenerateBatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MlSignalsGenerateBatch>>
>;
export type PostApiV1MlSignalsGenerateBatchMutationBody = BatchSignalRequest;
export type PostApiV1MlSignalsGenerateBatchMutationError = ErrorResponse;

/**
 * @summary Î∞∞Ïπò ML ÏãúÍ∑∏ÎÑê ÏÉùÏÑ±
 */
export const usePostApiV1MlSignalsGenerateBatch = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MlSignalsGenerateBatch>>,
    TError,
    { data: BatchSignalRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1MlSignalsGenerateBatch>>,
  TError,
  { data: BatchSignalRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiV1MlSignalsGenerateBatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÏãúÏû• Ï°∞Í±¥Ïóê Îî∞Îùº ÏãúÍ∑∏ÎÑêÏùÑ ÌïÑÌÑ∞ÎßÅÌï©ÎãàÎã§
 * @summary ÏãúÏû• Ï°∞Í±¥Î≥Ñ ÏãúÍ∑∏ÎÑê ÌïÑÌÑ∞ÎßÅ
 */
export const postApiV1MlSignalsFilter = (
  filterSignalsRequest: FilterSignalsRequest,
) => {
  return apiClient<FilteredSignalResponse>({
    url: `/api/v1/ml/signals/filter`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: filterSignalsRequest,
  });
};

export const getPostApiV1MlSignalsFilterMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MlSignalsFilter>>,
    TError,
    { data: FilterSignalsRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MlSignalsFilter>>,
  TError,
  { data: FilterSignalsRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MlSignalsFilter>>,
    { data: FilterSignalsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1MlSignalsFilter(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MlSignalsFilterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MlSignalsFilter>>
>;
export type PostApiV1MlSignalsFilterMutationBody = FilterSignalsRequest;
export type PostApiV1MlSignalsFilterMutationError = ErrorResponse;

/**
 * @summary ÏãúÏû• Ï°∞Í±¥Î≥Ñ ÏãúÍ∑∏ÎÑê ÌïÑÌÑ∞ÎßÅ
 */
export const usePostApiV1MlSignalsFilter = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MlSignalsFilter>>,
    TError,
    { data: FilterSignalsRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1MlSignalsFilter>>,
  TError,
  { data: FilterSignalsRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1MlSignalsFilterMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÏãúÍ∑∏ÎÑêÏùò ÏÑ±Í≥º Ï†ïÎ≥¥Î•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§
 * @summary ÏãúÍ∑∏ÎÑê ÏÑ±Í≥º ÏóÖÎç∞Ïù¥Ìä∏
 */
export const putApiV1MlSignalsSignalIdPerformance = (
  signalId: string,
  performanceUpdateRequest: PerformanceUpdateRequest,
) => {
  return apiClient<PerformanceUpdateResponse>({
    url: `/api/v1/ml/signals/${signalId}/performance`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: performanceUpdateRequest,
  });
};

export const getPutApiV1MlSignalsSignalIdPerformanceMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MlSignalsSignalIdPerformance>>,
    TError,
    { signalId: string; data: PerformanceUpdateRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1MlSignalsSignalIdPerformance>>,
  TError,
  { signalId: string; data: PerformanceUpdateRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1MlSignalsSignalIdPerformance>>,
    { signalId: string; data: PerformanceUpdateRequest }
  > = (props) => {
    const { signalId, data } = props ?? {};

    return putApiV1MlSignalsSignalIdPerformance(signalId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1MlSignalsSignalIdPerformanceMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1MlSignalsSignalIdPerformance>>
>;
export type PutApiV1MlSignalsSignalIdPerformanceMutationBody =
  PerformanceUpdateRequest;
export type PutApiV1MlSignalsSignalIdPerformanceMutationError = ErrorResponse;

/**
 * @summary ÏãúÍ∑∏ÎÑê ÏÑ±Í≥º ÏóÖÎç∞Ïù¥Ìä∏
 */
export const usePutApiV1MlSignalsSignalIdPerformance = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MlSignalsSignalIdPerformance>>,
    TError,
    { signalId: string; data: PerformanceUpdateRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1MlSignalsSignalIdPerformance>>,
  TError,
  { signalId: string; data: PerformanceUpdateRequest },
  TContext
> => {
  const mutationOptions =
    getPutApiV1MlSignalsSignalIdPerformanceMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÌòÑÏû¨ ÌôúÏÑ± ÏÉÅÌÉúÏù∏ ML Ìä∏Î†àÏù¥Îî© ÏãúÍ∑∏ÎÑê Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÌôúÏÑ± ÏãúÍ∑∏ÎÑê Ï°∞Ìöå
 */
export const getApiV1MlSignalsActive = (
  params?: GetApiV1MlSignalsActiveParams,
  signal?: AbortSignal,
) => {
  return apiClient<ActiveSignalsResponse>({
    url: `/api/v1/ml/signals/active`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1MlSignalsActiveQueryKey = (
  params?: GetApiV1MlSignalsActiveParams,
) => {
  return [`/api/v1/ml/signals/active`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1MlSignalsActiveQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MlSignalsActive>>,
  TError = ErrorResponse,
>(
  params?: GetApiV1MlSignalsActiveParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MlSignalsActive>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1MlSignalsActiveQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MlSignalsActive>>
  > = ({ signal }) => getApiV1MlSignalsActive(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MlSignalsActive>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MlSignalsActiveQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MlSignalsActive>>
>;
export type GetApiV1MlSignalsActiveQueryError = ErrorResponse;

/**
 * @summary ÌôúÏÑ± ÏãúÍ∑∏ÎÑê Ï°∞Ìöå
 */
export const useGetApiV1MlSignalsActive = <
  TData = Awaited<ReturnType<typeof getApiV1MlSignalsActive>>,
  TError = ErrorResponse,
>(
  params?: GetApiV1MlSignalsActiveParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MlSignalsActive>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MlSignalsActiveQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
