/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  CloseChallengeResponse,
  PlaceOrderResponse,
  SessionDetailResponse,
} from ".././model";

export const getGetApiSessionsSessionIdResponseMock = (
  overrideResponse: Partial<SessionDetailResponse> = {},
): SessionDetailResponse => ({
  challengeId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  challengeTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currentBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  orders: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      executedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      executedPrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      instrumentKey: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      limitPrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      orderType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["MARKET", "LIMIT"] as const),
        undefined,
      ]),
      quantity: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      side: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["BUY", "SELL"] as const),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "PENDING",
          "FILLED",
          "CANCELLED",
          "REJECTED",
        ] as const),
        undefined,
      ]),
    })),
    undefined,
  ]),
  positions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      averagePrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      currentPrice: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      instrumentKey: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      marketValue: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      quantity: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      unrealizedPL: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  profitLoss: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  profitLossPercent: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  seedBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sessionId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["ACTIVE", "COMPLETED", "CANCELLED"] as const),
    undefined,
  ]),
  totalValue: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiSessionsSessionIdOrdersResponseMock = (
  overrideResponse: Partial<PlaceOrderResponse> = {},
): PlaceOrderResponse => ({
  commission: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  executedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  executedPrice: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  orderId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  slippage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "PENDING",
      "FILLED",
      "CANCELLED",
      "REJECTED",
    ] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiSessionsSessionIdCloseResponseMock = (
  overrideResponse: Partial<CloseChallengeResponse> = {},
): CloseChallengeResponse => ({
  finalBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  profitLoss: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  profitLossPercent: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rank: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sessionId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalParticipants: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalValue: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiSessionsSessionIdMockHandler = (
  overrideResponse?:
    | SessionDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SessionDetailResponse> | SessionDetailResponse),
) => {
  return http.get("*/api/sessions/:sessionId", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiSessionsSessionIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiSessionsSessionIdOrdersMockHandler = (
  overrideResponse?:
    | PlaceOrderResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PlaceOrderResponse> | PlaceOrderResponse),
) => {
  return http.post("*/api/sessions/:sessionId/orders", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiSessionsSessionIdOrdersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiSessionsSessionIdCloseMockHandler = (
  overrideResponse?:
    | CloseChallengeResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CloseChallengeResponse> | CloseChallengeResponse),
) => {
  return http.post("*/api/sessions/:sessionId/close", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiSessionsSessionIdCloseResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getGetApiSessionsSessionIdMockHandler(),
  getPostApiSessionsSessionIdOrdersMockHandler(),
  getPostApiSessionsSessionIdCloseMockHandler(),
];
