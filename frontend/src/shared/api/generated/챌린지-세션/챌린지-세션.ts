/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CloseChallengeResponse,
  ErrorResponse,
  PlaceOrderRequest,
  PlaceOrderResponse,
  SessionDetailResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * Ï±åÎ¶∞ÏßÄ ÏÑ∏ÏÖòÏùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÏÑ∏ÏÖò ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getApiSessionsSessionId = (
  sessionId: number,
  signal?: AbortSignal,
) => {
  return apiClient<SessionDetailResponse>({
    url: `/api/sessions/${sessionId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiSessionsSessionIdQueryKey = (sessionId: number) => {
  return [`/api/sessions/${sessionId}`] as const;
};

export const getGetApiSessionsSessionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = ErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiSessionsSessionIdQueryKey(sessionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>
  > = ({ signal }) => getApiSessionsSessionId(sessionId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!sessionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiSessionsSessionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessionsSessionId>>
>;
export type GetApiSessionsSessionIdQueryError = ErrorResponse;

/**
 * @summary ÏÑ∏ÏÖò ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const useGetApiSessionsSessionId = <
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = ErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiSessionsSessionIdQueryOptions(
    sessionId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ï±åÎ¶∞ÏßÄ ÏÑ∏ÏÖòÏóêÏÑú Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÌï©ÎãàÎã§
 * @summary Ï£ºÎ¨∏ Ïã§Ìñâ
 */
export const postApiSessionsSessionIdOrders = (
  sessionId: number,
  placeOrderRequest: PlaceOrderRequest,
) => {
  return apiClient<PlaceOrderResponse>({
    url: `/api/sessions/${sessionId}/orders`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: placeOrderRequest,
  });
};

export const getPostApiSessionsSessionIdOrdersMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiSessionsSessionIdOrders>>,
    TError,
    { sessionId: number; data: PlaceOrderRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiSessionsSessionIdOrders>>,
  TError,
  { sessionId: number; data: PlaceOrderRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiSessionsSessionIdOrders>>,
    { sessionId: number; data: PlaceOrderRequest }
  > = (props) => {
    const { sessionId, data } = props ?? {};

    return postApiSessionsSessionIdOrders(sessionId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiSessionsSessionIdOrdersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiSessionsSessionIdOrders>>
>;
export type PostApiSessionsSessionIdOrdersMutationBody = PlaceOrderRequest;
export type PostApiSessionsSessionIdOrdersMutationError = ErrorResponse;

/**
 * @summary Ï£ºÎ¨∏ Ïã§Ìñâ
 */
export const usePostApiSessionsSessionIdOrders = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiSessionsSessionIdOrders>>,
    TError,
    { sessionId: number; data: PlaceOrderRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiSessionsSessionIdOrders>>,
  TError,
  { sessionId: number; data: PlaceOrderRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiSessionsSessionIdOrdersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ï±åÎ¶∞ÏßÄ ÏÑ∏ÏÖòÏùÑ Ï¢ÖÎ£åÌïòÍ≥† Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï©ÎãàÎã§
 * @summary Ï±åÎ¶∞ÏßÄ Ï¢ÖÎ£å
 */
export const postApiSessionsSessionIdClose = (sessionId: number) => {
  return apiClient<CloseChallengeResponse>({
    url: `/api/sessions/${sessionId}/close`,
    method: "POST",
  });
};

export const getPostApiSessionsSessionIdCloseMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiSessionsSessionIdClose>>,
    TError,
    { sessionId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiSessionsSessionIdClose>>,
  TError,
  { sessionId: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiSessionsSessionIdClose>>,
    { sessionId: number }
  > = (props) => {
    const { sessionId } = props ?? {};

    return postApiSessionsSessionIdClose(sessionId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiSessionsSessionIdCloseMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiSessionsSessionIdClose>>
>;

export type PostApiSessionsSessionIdCloseMutationError = ErrorResponse;

/**
 * @summary Ï±åÎ¶∞ÏßÄ Ï¢ÖÎ£å
 */
export const usePostApiSessionsSessionIdClose = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiSessionsSessionIdClose>>,
    TError,
    { sessionId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiSessionsSessionIdClose>>,
  TError,
  { sessionId: number },
  TContext
> => {
  const mutationOptions =
    getPostApiSessionsSessionIdCloseMutationOptions(options);

  return useMutation(mutationOptions);
};
