/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Stock Trading Simulation Platform API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CommentResponse,
  CreateCommentRequest,
  CreatePostRequest,
  ErrorResponse,
  PostResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * ÌäπÏ†ï Ï±åÎ¶∞ÏßÄÏóê Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±Ìï©ÎãàÎã§
 * @summary Í≤åÏãúÍ∏Ä ÏûëÏÑ±
 */
export const postApiChallengesChallengeIdPosts = (
  challengeId: number,
  createPostRequest: CreatePostRequest,
) => {
  return apiClient<PostResponse>({
    url: `/api/challenges/${challengeId}/posts`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createPostRequest,
  });
};

export const getPostApiChallengesChallengeIdPostsMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
    TError,
    { challengeId: number; data: CreatePostRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
  TError,
  { challengeId: number; data: CreatePostRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
    { challengeId: number; data: CreatePostRequest }
  > = (props) => {
    const { challengeId, data } = props ?? {};

    return postApiChallengesChallengeIdPosts(challengeId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiChallengesChallengeIdPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>
>;
export type PostApiChallengesChallengeIdPostsMutationBody = CreatePostRequest;
export type PostApiChallengesChallengeIdPostsMutationError = ErrorResponse;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏûëÏÑ±
 */
export const usePostApiChallengesChallengeIdPosts = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
    TError,
    { challengeId: number; data: CreatePostRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
  TError,
  { challengeId: number; data: CreatePostRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiChallengesChallengeIdPostsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÌäπÏ†ï Ï±åÎ¶∞ÏßÄÏùò Í≤åÏãúÍ∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const getApiChallengesChallengeIdPosts = (
  challengeId: number,
  signal?: AbortSignal,
) => {
  return apiClient<PostResponse[]>({
    url: `/api/challenges/${challengeId}/posts`,
    method: "GET",
    signal,
  });
};

export const getGetApiChallengesChallengeIdPostsQueryKey = (
  challengeId: number,
) => {
  return [`/api/challenges/${challengeId}/posts`] as const;
};

export const getGetApiChallengesChallengeIdPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
  TError = unknown,
>(
  challengeId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiChallengesChallengeIdPostsQueryKey(challengeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>
  > = ({ signal }) => getApiChallengesChallengeIdPosts(challengeId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!challengeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChallengesChallengeIdPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>
>;
export type GetApiChallengesChallengeIdPostsQueryError = unknown;

/**
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const useGetApiChallengesChallengeIdPosts = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
  TError = unknown,
>(
  challengeId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiChallengesChallengeIdPostsQueryOptions(
    challengeId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÌäπÏ†ï Í≤åÏãúÍ∏ÄÏóê ÎåìÍ∏ÄÏùÑ ÏûëÏÑ±Ìï©ÎãàÎã§
 * @summary ÎåìÍ∏Ä ÏûëÏÑ±
 */
export const postApiChallengesChallengeIdPostsPostIdComments = (
  challengeId: number,
  postId: number,
  createCommentRequest: CreateCommentRequest,
) => {
  return apiClient<CommentResponse>({
    url: `/api/challenges/${challengeId}/posts/${postId}/comments`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createCommentRequest,
  });
};

export const getPostApiChallengesChallengeIdPostsPostIdCommentsMutationOptions =
  <TError = ErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiChallengesChallengeIdPostsPostIdComments>
      >,
      TError,
      { challengeId: number; postId: number; data: CreateCommentRequest },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPostsPostIdComments>>,
    TError,
    { challengeId: number; postId: number; data: CreateCommentRequest },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiChallengesChallengeIdPostsPostIdComments>
      >,
      { challengeId: number; postId: number; data: CreateCommentRequest }
    > = (props) => {
      const { challengeId, postId, data } = props ?? {};

      return postApiChallengesChallengeIdPostsPostIdComments(
        challengeId,
        postId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiChallengesChallengeIdPostsPostIdCommentsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPostsPostIdComments>>
  >;
export type PostApiChallengesChallengeIdPostsPostIdCommentsMutationBody =
  CreateCommentRequest;
export type PostApiChallengesChallengeIdPostsPostIdCommentsMutationError =
  ErrorResponse;

/**
 * @summary ÎåìÍ∏Ä ÏûëÏÑ±
 */
export const usePostApiChallengesChallengeIdPostsPostIdComments = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPostsPostIdComments>>,
    TError,
    { challengeId: number; postId: number; data: CreateCommentRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdPostsPostIdComments>>,
  TError,
  { challengeId: number; postId: number; data: CreateCommentRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiChallengesChallengeIdPostsPostIdCommentsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÌäπÏ†ï Í≤åÏãúÍ∏ÄÏùò ÎåìÍ∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÎåìÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const getApiChallengesChallengeIdPostsPostIdComments = (
  challengeId: number,
  postId: number,
  signal?: AbortSignal,
) => {
  return apiClient<CommentResponse[]>({
    url: `/api/challenges/${challengeId}/posts/${postId}/comments`,
    method: "GET",
    signal,
  });
};

export const getGetApiChallengesChallengeIdPostsPostIdCommentsQueryKey = (
  challengeId: number,
  postId: number,
) => {
  return [`/api/challenges/${challengeId}/posts/${postId}/comments`] as const;
};

export const getGetApiChallengesChallengeIdPostsPostIdCommentsQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getApiChallengesChallengeIdPostsPostIdComments>
  >,
  TError = unknown,
>(
  challengeId: number,
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiChallengesChallengeIdPostsPostIdComments>
        >,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiChallengesChallengeIdPostsPostIdCommentsQueryKey(
      challengeId,
      postId,
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdPostsPostIdComments>>
  > = ({ signal }) =>
    getApiChallengesChallengeIdPostsPostIdComments(challengeId, postId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(challengeId && postId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdPostsPostIdComments>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChallengesChallengeIdPostsPostIdCommentsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdPostsPostIdComments>>
  >;
export type GetApiChallengesChallengeIdPostsPostIdCommentsQueryError = unknown;

/**
 * @summary ÎåìÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const useGetApiChallengesChallengeIdPostsPostIdComments = <
  TData = Awaited<
    ReturnType<typeof getApiChallengesChallengeIdPostsPostIdComments>
  >,
  TError = unknown,
>(
  challengeId: number,
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiChallengesChallengeIdPostsPostIdComments>
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetApiChallengesChallengeIdPostsPostIdCommentsQueryOptions(
      challengeId,
      postId,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
