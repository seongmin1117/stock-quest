/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * StockQuest API
 * Î™®Ïùò Ìà¨Ïûê Ï±åÎ¶∞ÏßÄ ÌïôÏäµ ÌîåÎû´Ìèº API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CreatePostRequest,
  GetApiChallengesChallengeIdPostsParams,
  PostListResponse,
  PostResponse,
} from ".././model";
import { apiClient } from "../../api-client";

/**
 * Ï±åÎ¶∞ÏßÄÏùò Ïª§ÎÆ§ÎãàÌã∞ Í≤åÏãúÍ∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const getApiChallengesChallengeIdPosts = (
  challengeId: number,
  params?: GetApiChallengesChallengeIdPostsParams,
  signal?: AbortSignal,
) => {
  return apiClient<PostListResponse>({
    url: `/api/challenges/${challengeId}/posts`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiChallengesChallengeIdPostsQueryKey = (
  challengeId: number,
  params?: GetApiChallengesChallengeIdPostsParams,
) => {
  return [
    `/api/challenges/${challengeId}/posts`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiChallengesChallengeIdPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
  TError = unknown,
>(
  challengeId: number,
  params?: GetApiChallengesChallengeIdPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiChallengesChallengeIdPostsQueryKey(challengeId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>
  > = ({ signal }) =>
    getApiChallengesChallengeIdPosts(challengeId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!challengeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChallengesChallengeIdPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>
>;
export type GetApiChallengesChallengeIdPostsQueryError = unknown;

/**
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const useGetApiChallengesChallengeIdPosts = <
  TData = Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
  TError = unknown,
>(
  challengeId: number,
  params?: GetApiChallengesChallengeIdPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiChallengesChallengeIdPosts>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiChallengesChallengeIdPostsQueryOptions(
    challengeId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ï±åÎ¶∞ÏßÄ Ïª§ÎÆ§ÎãàÌã∞Ïóê ÏÉà Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±Ìï©ÎãàÎã§
 * @summary Í≤åÏãúÍ∏Ä ÏûëÏÑ±
 */
export const postApiChallengesChallengeIdPosts = (
  challengeId: number,
  createPostRequest: CreatePostRequest,
) => {
  return apiClient<PostResponse>({
    url: `/api/challenges/${challengeId}/posts`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createPostRequest,
  });
};

export const getPostApiChallengesChallengeIdPostsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
    TError,
    { challengeId: number; data: CreatePostRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
  TError,
  { challengeId: number; data: CreatePostRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
    { challengeId: number; data: CreatePostRequest }
  > = (props) => {
    const { challengeId, data } = props ?? {};

    return postApiChallengesChallengeIdPosts(challengeId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiChallengesChallengeIdPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>
>;
export type PostApiChallengesChallengeIdPostsMutationBody = CreatePostRequest;
export type PostApiChallengesChallengeIdPostsMutationError = unknown;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏûëÏÑ±
 */
export const usePostApiChallengesChallengeIdPosts = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
    TError,
    { challengeId: number; data: CreatePostRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiChallengesChallengeIdPosts>>,
  TError,
  { challengeId: number; data: CreatePostRequest },
  TContext
> => {
  const mutationOptions =
    getPostApiChallengesChallengeIdPostsMutationOptions(options);

  return useMutation(mutationOptions);
};
