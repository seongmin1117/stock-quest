/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * StockQuest API
 * 모의 투자 챌린지 학습 플랫폼 API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { PostListResponse, PostResponse } from ".././model";

export const getGetApiChallengesChallengeIdPostsResponseMock = (
  overrideResponse: Partial<PostListResponse> = {},
): PostListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      authorNickname: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      commentCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiChallengesChallengeIdPostsResponseMock = (
  overrideResponse: Partial<PostResponse> = {},
): PostResponse => ({
  authorNickname: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  commentCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiChallengesChallengeIdPostsMockHandler = (
  overrideResponse?:
    | PostListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PostListResponse> | PostListResponse),
) => {
  return http.get("*/api/challenges/:challengeId/posts", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiChallengesChallengeIdPostsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostApiChallengesChallengeIdPostsMockHandler = (
  overrideResponse?:
    | PostResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostResponse> | PostResponse),
) => {
  return http.post("*/api/challenges/:challengeId/posts", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiChallengesChallengeIdPostsResponseMock(),
      ),
      {
        status: 201,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getMock = () => [
  getGetApiChallengesChallengeIdPostsMockHandler(),
  getPostApiChallengesChallengeIdPostsMockHandler(),
];
