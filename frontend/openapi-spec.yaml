openapi: 3.0.3
info:
  title: StockQuest API
  description: Stock Trading Simulation Platform API
  version: 1.0.0
  contact:
    name: StockQuest Team
    email: team@stockquest.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.stockquest.com
    description: Production server

tags:
  - name: 인증
    description: "사용자 인증 관련 API"
  - name: 챌린지
    description: "투자 챌린지 관련 API"
  - name: 챌린지 세션
    description: "챌린지 세션 및 거래 관련 API"
  - name: 커뮤니티
    description: "사용자 커뮤니티 관련 API"
  - name: 리더보드
    description: "순위 및 성과 관련 API"
  - name: 관리자
    description: "관리자 전용 API"
  - name: ML 시그널
    description: "ML 트레이딩 시그널 관련 API"
  - name: 리스크 관리
    description: "포트폴리오 리스크 관리 관련 API"
  - name: 포트폴리오 최적화
    description: "AI 기반 포트폴리오 최적화 관련 API"
  - name: 블로그 콘텐츠
    description: "블로그 글, 카테고리, 태그 관련 API"

paths:
  # Authentication APIs
  /api/auth/signup:
    post:
      tags:
        - 인증
      summary: 회원가입
      description: "새로운 사용자 계정을 생성합니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: "회원가입 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - 인증
      summary: 로그인
      description: "이메일과 비밀번호로 로그인하며, JWT 토큰을 발급받습니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "로그인 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/me:
    get:
      tags:
        - 인증
      summary: 현재 사용자 조회
      description: "JWT 토큰 기반으로 현재 인증된 사용자 정보를 조회합니다"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      tags:
        - 인증
      summary: 토큰 갱신
      description: "리프레시 토큰으로 새로운 액세스 토큰을 발급받습니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: "토큰 갱신 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "리프레시 토큰 만료 또는 유효하지 않음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      tags:
        - 인증
      summary: 로그아웃
      description: "현재 세션을 종료하고 토큰을 무효화합니다"
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: "로그아웃 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Challenge APIs
  /api/challenges:
    get:
      tags:
        - 챌린지
      summary: 챌린지 목록 조회
      description: "활성 상태의 챌린지 목록을 조회합니다"
      parameters:
        - name: page
          in: query
          description: "페이지 번호 (0부터 시작)"
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: "페이지 크기"
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeListResponse'

  /api/challenges/{challengeId}:
    get:
      tags:
        - 챌린지
      summary: 챌린지 상세 조회
      description: "특정 챌린지의 상세 정보를 조회합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeDetailResponse'
        '404':
          description: "챌린지를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/challenges/{challengeId}/start:
    post:
      tags:
        - 챌린지
      summary: 챌린지 시작
      description: "새로운 챌린지 세션을 시작합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "챌린지 시작 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartChallengeResponse'
        '400':
          description: "잘못된 요청 (이미 참여 중인 챌린지 등)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Session APIs
  /api/sessions/{sessionId}:
    get:
      tags:
        - 챌린지 세션
      summary: 세션 상세 조회
      description: "챌린지 세션의 상세 정보를 조회합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: "세션 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetailResponse'
        '404':
          description: "세션을 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/sessions/{sessionId}/orders:
    post:
      tags:
        - 챌린지 세션
      summary: 주문 실행
      description: "챌린지 세션에서 주문을 실행합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: "세션 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        '200':
          description: "주문 실행 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceOrderResponse'
        '400':
          description: "잘못된 주문 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/sessions/{sessionId}/close:
    post:
      tags:
        - 챌린지 세션
      summary: 챌린지 종료
      description: "챌린지 세션을 종료하고 결과를 확인합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: "세션 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "챌린지 종료 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseChallengeResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Community APIs
  /api/challenges/{challengeId}/posts:
    post:
      tags:
        - 커뮤니티
      summary: 게시글 작성
      description: "특정 챌린지에 게시글을 작성합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: "게시글 작성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - 커뮤니티
      summary: 게시글 목록 조회
      description: "특정 챌린지의 게시글 목록을 조회합니다"
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'

  /api/challenges/{challengeId}/posts/{postId}/comments:
    post:
      tags:
        - 커뮤니티
      summary: 댓글 작성
      description: "특정 게시글에 댓글을 작성합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
        - name: postId
          in: path
          required: true
          description: "게시글 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '200':
          description: "댓글 작성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - 커뮤니티
      summary: 댓글 목록 조회
      description: "특정 게시글의 댓글 목록을 조회합니다"
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
        - name: postId
          in: path
          required: true
          description: "게시글 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponse'

  # Leaderboard APIs
  /api/challenges/{challengeId}/leaderboard:
    get:
      tags:
        - 리더보드
      summary: 리더보드 조회
      description: "특정 챌린지의 리더보드를 조회합니다"
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: "조회할 순위 수"
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardResponse'

  /api/challenges/{challengeId}/leaderboard/calculate:
    post:
      tags:
        - 리더보드
      summary: 리더보드 계산
      description: "챌린지 종료 후 리더보드를 계산합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "계산 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ML Signals APIs
  /api/v1/ml/signals/generate/{symbol}:
    get:
      tags:
        - ML 시그널
      summary: ML 트레이딩 시그널 생성
      description: "단일 심볼에 대한 ML 기반 트레이딩 시그널을 생성합니다"
      parameters:
        - name: symbol
          in: path
          required: true
          description: "주식 심볼 (예: A, B, C, D, E)"
          schema:
            type: string
      responses:
        '200':
          description: "시그널 생성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingSignalResponse'
        '500':
          description: "시그널 생성 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/signals/generate/batch:
    post:
      tags:
        - ML 시그널
      summary: 배치 ML 시그널 생성
      description: "복수 심볼에 대한 ML 트레이딩 시그널을 배치로 생성합니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchSignalRequest'
      responses:
        '200':
          description: "배치 시그널 생성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSignalResponse'
        '500':
          description: "배치 시그널 생성 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/signals/filter:
    post:
      tags:
        - ML 시그널
      summary: 시장 조건별 시그널 필터링
      description: "시장 조건에 따라 시그널을 필터링합니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSignalsRequest'
      responses:
        '200':
          description: "시그널 필터링 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredSignalResponse'
        '500':
          description: "시그널 필터링 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/signals/{signalId}/performance:
    put:
      tags:
        - ML 시그널
      summary: 시그널 성과 업데이트
      description: "시그널의 성과 정보를 업데이트합니다"
      parameters:
        - name: signalId
          in: path
          required: true
          description: "시그널 ID"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceUpdateRequest'
      responses:
        '200':
          description: "성과 업데이트 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceUpdateResponse'
        '500':
          description: "성과 업데이트 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/signals/active:
    get:
      tags:
        - ML 시그널
      summary: 활성 시그널 조회
      description: "현재 활성 상태인 ML 트레이딩 시그널 목록을 조회합니다"
      parameters:
        - name: limit
          in: query
          description: "조회할 시그널 수"
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: "활성 시그널 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveSignalsResponse'
        '500':
          description: "활성 시그널 조회 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Risk Management APIs
  /api/v1/risk/portfolios/{portfolioId}/var:
    get:
      tags:
        - 리스크 관리
      summary: 포트폴리오 VaR 계산
      description: "Value at Risk (VaR)를 계산합니다"
      parameters:
        - name: portfolioId
          in: path
          required: true
          description: "포트폴리오 ID"
          schema:
            type: integer
            format: int64
        - name: confidenceLevel
          in: query
          description: "신뢰수준 (%)"
          required: false
          schema:
            type: number
            format: double
            default: 95.0
        - name: timeHorizon
          in: query
          description: "시간 지평 (일)"
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: "VaR 계산 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaRResponse'
        '500':
          description: "VaR 계산 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/risk/alerts:
    get:
      tags:
        - 리스크 관리
      summary: 리스크 알림 조회
      description: "활성 리스크 알림 목록을 조회합니다"
      parameters:
        - name: status
          in: query
          description: "알림 상태"
          required: false
          schema:
            type: string
            enum: [ACTIVE, RESOLVED, ALL]
            default: ACTIVE
      responses:
        '200':
          description: "리스크 알림 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskAlertsResponse'
        '500':
          description: "리스크 알림 조회 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/risk/dashboard:
    get:
      tags:
        - 리스크 관리
      summary: 리스크 대시보드 데이터 조회
      description: "전체 리스크 관리 대시보드 데이터를 조회합니다"
      responses:
        '200':
          description: "리스크 대시보드 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskDashboardResponse'
        '500':
          description: "리스크 대시보드 조회 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/risk/alerts/configure:
    post:
      tags:
        - 리스크 관리
      summary: 리스크 알림 설정
      description: "리스크 알림 임계값을 설정합니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskAlertConfigRequest'
      responses:
        '200':
          description: "리스크 알림 설정 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskAlertConfigResponse'
        '500':
          description: "리스크 알림 설정 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/risk/limits/{portfolioId}:
    put:
      tags:
        - 리스크 관리
      summary: 리스크 한도 업데이트
      description: "포트폴리오의 리스크 한도를 업데이트합니다"
      parameters:
        - name: portfolioId
          in: path
          required: true
          description: "포트폴리오 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskLimitsUpdateRequest'
      responses:
        '200':
          description: "리스크 한도 업데이트 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskLimitsUpdateResponse'
        '500':
          description: "리스크 한도 업데이트 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Portfolio Optimization APIs
  /api/v1/ml/portfolio-optimization/{portfolioId}/optimize:
    post:
      tags:
        - 포트폴리오 최적화
      summary: 포트폴리오 최적화 실행
      description: "AI 기반 포트폴리오 최적화를 실행합니다"
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: "포트폴리오 ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptimizationRequest'
      responses:
        '200':
          description: "포트폴리오 최적화 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioOptimizationResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "포트폴리오 최적화 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/portfolio-optimization/{portfolioId}/efficient-frontier:
    post:
      tags:
        - 포트폴리오 최적화
      summary: 효율적 프론티어 계산
      description: "포트폴리오의 효율적 프론티어를 계산합니다"
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: "포트폴리오 ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EfficientFrontierRequest'
      responses:
        '200':
          description: "효율적 프론티어 계산 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EfficientFrontierResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "효율적 프론티어 계산 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/portfolio-optimization/{portfolioId}/rebalancing-suggestions:
    get:
      tags:
        - 포트폴리오 최적화
      summary: 리밸런싱 제안 조회
      description: "포트폴리오의 리밸런싱 제안을 조회합니다"
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: "포트폴리오 ID"
      responses:
        '200':
          description: "리밸런싱 제안 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebalancingSuggestionsResponse'
        '500':
          description: "리밸런싱 제안 조회 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/portfolio-optimization/{portfolioId}/history:
    get:
      tags:
        - 포트폴리오 최적화
      summary: 최적화 이력 조회
      description: "포트폴리오의 최적화 이력을 조회합니다"
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: "포트폴리오 ID"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: "조회할 이력 수"
      responses:
        '200':
          description: "최적화 이력 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptimizationHistoryResponse'
        '500':
          description: "최적화 이력 조회 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ml/portfolio-optimization/{portfolioId}/backtest:
    post:
      tags:
        - 포트폴리오 최적화
      summary: 백테스트 실행
      description: "포트폴리오 전략의 백테스트를 실행합니다"
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: "포트폴리오 ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacktestRequest'
      responses:
        '200':
          description: "백테스트 실행 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "백테스트 실행 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Blog Content APIs
  /api/v1/content/articles:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 블로그 글 검색
      description: "게시된 블로그 글을 검색합니다"
      parameters:
        - name: query
          in: query
          description: "검색 키워드"
          schema:
            type: string
        - name: category
          in: query
          description: "카테고리 슬러그"
          schema:
            type: string
        - name: tag
          in: query
          description: "태그 이름"
          schema:
            type: string
        - name: difficulty
          in: query
          description: "난이도 필터"
          schema:
            type: string
            enum: [BEGINNER, INTERMEDIATE, ADVANCED]
        - name: page
          in: query
          description: "페이지 번호 (0부터 시작)"
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: "페이지 크기"
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: "정렬 방식"
          schema:
            type: string
            default: "createdAt,desc"
      responses:
        '200':
          description: "글 검색 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleSearchResponse'

  /api/v1/content/articles/{slug}:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 글 상세 조회
      description: "슬러그로 특정 글의 상세 정보를 조회합니다"
      parameters:
        - name: slug
          in: path
          required: true
          description: "글 슬러그"
          schema:
            type: string
      responses:
        '200':
          description: "글 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
        '404':
          description: "글을 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/content/articles/featured:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 추천 글 목록
      description: "추천 글 목록을 조회합니다"
      parameters:
        - name: limit
          in: query
          description: "조회할 글 수"
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: "추천 글 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleResponse'

  /api/v1/content/articles/recent:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 최신 글 목록
      description: "최신 글 목록을 조회합니다"
      parameters:
        - name: limit
          in: query
          description: "조회할 글 수"
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: "최신 글 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleResponse'

  /api/v1/content/articles/{articleId}/related:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 관련 글 목록
      description: "특정 글과 관련된 글 목록을 조회합니다"
      parameters:
        - name: articleId
          in: path
          required: true
          description: "글 ID"
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: "조회할 글 수"
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: "관련 글 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleResponse'

  /api/v1/content/categories:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 카테고리 목록
      description: "모든 활성 카테고리 목록을 조회합니다"
      responses:
        '200':
          description: "카테고리 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'

  /api/v1/content/categories/{slug}:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 카테고리 상세 조회
      description: "슬러그로 특정 카테고리 정보를 조회합니다"
      parameters:
        - name: slug
          in: path
          required: true
          description: "카테고리 슬러그"
          schema:
            type: string
      responses:
        '200':
          description: "카테고리 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: "카테고리를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/content/categories/featured:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 추천 카테고리 목록
      description: "홈페이지 표시용 추천 카테고리 목록을 조회합니다"
      responses:
        '200':
          description: "추천 카테고리 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'

  /api/v1/content/tags:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 태그 목록
      description: "태그 목록을 조회합니다"
      parameters:
        - name: type
          in: query
          description: "태그 타입"
          schema:
            type: string
            enum: [GENERAL, TECHNICAL, LEVEL, STRATEGY]
        - name: query
          in: query
          description: "태그 검색 키워드"
          schema:
            type: string
        - name: limit
          in: query
          description: "조회할 태그 수"
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: "태그 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagResponse'

  /api/v1/content/tags/popular:
    get:
      tags:
        - 블로그 콘텐츠
      summary: 인기 태그 목록
      description: "인기 태그 목록을 조회합니다"
      parameters:
        - name: limit
          in: query
          description: "조회할 태그 수"
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: "인기 태그 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Request DTOs
    SignupRequest:
      type: object
      required:
        - email
        - password
        - nickname
      properties:
        email:
          type: string
          format: email
          description: "사용자 이메일"
          example: user@example.com
        password:
          type: string
          description: "비밀번호 (최소 8자, 대소문자, 숫자, 특수문자 포함)"
          example: Password123!
        nickname:
          type: string
          description: "사용자 닉네임"
          example: 투자왕김첨지

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: "사용자 이메일"
          example: user@example.com
        password:
          type: string
          description: "비밀번호"
          example: Password123!
        redirectUrl:
          type: string
          description: "로그인 성공 후 리다이렉트할 URL"
          example: /dashboard

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: "리프레시 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    LogoutRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: "리프레시 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        logoutFromAllDevices:
          type: boolean
          description: "모든 기기에서 로그아웃 여부"
          default: false

    PlaceOrderRequest:
      type: object
      required:
        - instrumentKey
        - side
        - quantity
        - orderType
      properties:
        instrumentKey:
          type: string
          description: "투자 상품 키 (예: AAPL, TSLA)"
          example: AAPL
        side:
          type: string
          enum: [BUY, SELL]
          description: "주문 방향"
          example: BUY
        quantity:
          type: integer
          minimum: 1
          description: "주문 수량"
          example: 10
        orderType:
          type: string
          enum: [MARKET, LIMIT]
          description: "주문 유형"
          example: MARKET
        limitPrice:
          type: number
          format: double
          description: "지정가 주문 시 가격 (LIMIT 주문에서만 사용)"
          example: 150.00

    # Response DTOs
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: "JWT 액세스 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: "JWT 리프레시 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        accessTokenExpiresAt:
          type: string
          format: date-time
          description: "액세스 토큰 만료 시간"
          example: "2024-01-15T12:00:00Z"
        refreshTokenExpiresAt:
          type: string
          format: date-time
          description: "리프레시 토큰 만료 시간"
          example: "2024-02-15T12:00:00Z"
        userId:
          type: integer
          format: int64
          description: "사용자 ID"
          example: 1
        email:
          type: string
          format: email
          description: "사용자 이메일"
          example: user@example.com
        nickname:
          type: string
          description: "사용자 닉네임"
          example: 투자왕김첨지
        redirectUrl:
          type: string
          description: "리다이렉트 URL"
          example: /dashboard

    ChallengeListResponse:
      type: object
      properties:
        challenges:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeItem'
        page:
          type: integer
          description: "현재 페이지 번호"
          example: 0
        size:
          type: integer
          description: "페이지 크기"
          example: 10
        totalElements:
          type: integer
          format: int64
          description: "전체 요소 수"
          example: 25
        totalPages:
          type: integer
          description: "전체 페이지 수"
          example: 3

    ChallengeItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        title:
          type: string
          description: "챌린지 제목"
          example: "기초 투자 챌린지"
        description:
          type: string
          description: "챌린지 설명"
          example: "기본적인 주식 투자를 배워보는 챌린지"
        difficultyLevel:
          type: string
          enum: [BEGINNER, INTERMEDIATE, ADVANCED]
          description: "난이도"
          example: BEGINNER
        startDate:
          type: string
          format: date-time
          description: "시작 일시"
          example: "2024-01-01T00:00:00Z"
        endDate:
          type: string
          format: date-time
          description: "종료 일시"
          example: "2024-01-31T23:59:59Z"
        participantCount:
          type: integer
          description: "참여자 수"
          example: 127
        maxParticipants:
          type: integer
          description: "최대 참여자 수"
          example: 1000

    ChallengeDetailResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        title:
          type: string
          description: "챌린지 제목"
          example: "기초 투자 챌린지"
        description:
          type: string
          description: "챌린지 설명"
        difficultyLevel:
          type: string
          enum: [BEGINNER, INTERMEDIATE, ADVANCED]
          description: "난이도"
        startDate:
          type: string
          format: date-time
          description: "시작 일시"
        endDate:
          type: string
          format: date-time
          description: "종료 일시"
        seedBalance:
          type: number
          format: double
          description: "시드머니"
          example: 1000000.00
        participantCount:
          type: integer
          description: "참여자 수"
        maxParticipants:
          type: integer
          description: "최대 참여자 수"
        instruments:
          type: array
          items:
            type: string
          description: "사용 가능한 투자 상품 목록"
          example: ["AAPL", "TSLA", "MSFT"]
        userParticipation:
          type: object
          properties:
            isParticipating:
              type: boolean
              description: "사용자 참여 여부"
            sessionId:
              type: integer
              format: int64
              description: "세션 ID (참여 중인 경우)"

    StartChallengeResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
          description: "생성된 세션 ID"
          example: 123
        challengeId:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        seedBalance:
          type: number
          format: double
          description: "시드머니"
          example: 1000000.00
        status:
          type: string
          enum: [ACTIVE, COMPLETED, CANCELLED]
          description: "세션 상태"
          example: ACTIVE

    SessionDetailResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
          description: "세션 ID"
        challengeId:
          type: integer
          format: int64
          description: "챌린지 ID"
        challengeTitle:
          type: string
          description: "챌린지 제목"
        status:
          type: string
          enum: [ACTIVE, COMPLETED, CANCELLED]
          description: "세션 상태"
        seedBalance:
          type: number
          format: double
          description: "시드머니"
        currentBalance:
          type: number
          format: double
          description: "현재 잔액"
        totalValue:
          type: number
          format: double
          description: "총 자산 가치"
        profitLoss:
          type: number
          format: double
          description: "손익"
        profitLossPercent:
          type: number
          format: double
          description: "손익률 (%)"
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    Position:
      type: object
      properties:
        instrumentKey:
          type: string
          description: "투자 상품 키"
        quantity:
          type: integer
          description: "보유 수량"
        averagePrice:
          type: number
          format: double
          description: "평균 단가"
        currentPrice:
          type: number
          format: double
          description: "현재 가격"
        marketValue:
          type: number
          format: double
          description: "시장 가치"
        unrealizedPL:
          type: number
          format: double
          description: "미실현 손익"

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "주문 ID"
        instrumentKey:
          type: string
          description: "투자 상품 키"
        side:
          type: string
          enum: [BUY, SELL]
          description: "주문 방향"
        quantity:
          type: integer
          description: "주문 수량"
        orderType:
          type: string
          enum: [MARKET, LIMIT]
          description: "주문 유형"
        limitPrice:
          type: number
          format: double
          description: "지정가 (LIMIT 주문인 경우)"
        executedPrice:
          type: number
          format: double
          description: "체결 가격"
        status:
          type: string
          enum: [PENDING, FILLED, CANCELLED, REJECTED]
          description: "주문 상태"
        executedAt:
          type: string
          format: date-time
          description: "체결 시간"

    PlaceOrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          description: "주문 ID"
        status:
          type: string
          enum: [PENDING, FILLED, CANCELLED, REJECTED]
          description: "주문 상태"
        executedPrice:
          type: number
          format: double
          description: "체결 가격"
        commission:
          type: number
          format: double
          description: "수수료"
        slippage:
          type: number
          format: double
          description: "슬리피지"
        executedAt:
          type: string
          format: date-time
          description: "체결 시간"

    CloseChallengeResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
          description: "세션 ID"
        finalBalance:
          type: number
          format: double
          description: "최종 잔액"
        totalValue:
          type: number
          format: double
          description: "총 자산 가치"
        profitLoss:
          type: number
          format: double
          description: "최종 손익"
        profitLossPercent:
          type: number
          format: double
          description: "최종 손익률 (%)"
        rank:
          type: integer
          description: "최종 순위"
        totalParticipants:
          type: integer
          description: "전체 참여자 수"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: "오류 메시지"
          example: "잘못된 요청입니다"
        error:
          type: string
          description: "오류 코드"
          example: "INVALID_REQUEST"
        status:
          type: integer
          description: "HTTP 상태 코드"
          example: 400
        path:
          type: string
          description: "요청 경로"
          example: "/api/auth/login"
        timestamp:
          type: string
          format: date-time
          description: "오류 발생 시간"
          example: "2024-01-15T12:00:00Z"

    # Community DTOs
    CreatePostRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: "게시글 내용"
          example: "오늘 AAPL 주식을 매수했습니다. 좋은 선택이었을까요?"

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: "댓글 내용"
          example: "좋은 선택이라고 생각합니다!"

    PostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "게시글 ID"
          example: 1
        challengeId:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        userId:
          type: integer
          format: int64
          description: "작성자 ID"
          example: 1
        userNickname:
          type: string
          description: "작성자 닉네임"
          example: "투자왕김첨지"
        content:
          type: string
          description: "게시글 내용"
          example: "오늘 AAPL 주식을 매수했습니다. 좋은 선택이었을까요?"
        createdAt:
          type: string
          format: date-time
          description: "작성 시간"
          example: "2024-01-15T12:00:00Z"
        commentCount:
          type: integer
          description: "댓글 수"
          example: 5

    CommentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "댓글 ID"
          example: 1
        postId:
          type: integer
          format: int64
          description: "게시글 ID"
          example: 1
        userId:
          type: integer
          format: int64
          description: "작성자 ID"
          example: 2
        userNickname:
          type: string
          description: "작성자 닉네임"
          example: "투자고수박명수"
        content:
          type: string
          description: "댓글 내용"
          example: "좋은 선택이라고 생각합니다!"
        createdAt:
          type: string
          format: date-time
          description: "작성 시간"
          example: "2024-01-15T12:10:00Z"

    # Leaderboard DTOs
    LeaderboardResponse:
      type: object
      properties:
        rank:
          type: integer
          description: "순위"
          example: 1
        userId:
          type: integer
          format: int64
          description: "사용자 ID"
          example: 1
        userNickname:
          type: string
          description: "사용자 닉네임"
          example: "투자왕김첨지"
        sessionId:
          type: integer
          format: int64
          description: "세션 ID"
          example: 123
        finalBalance:
          type: number
          format: double
          description: "최종 잔액"
          example: 1150000.00
        totalValue:
          type: number
          format: double
          description: "총 자산 가치"
          example: 1200000.00
        profitLoss:
          type: number
          format: double
          description: "손익"
          example: 200000.00
        profitLossPercent:
          type: number
          format: double
          description: "손익률 (%)"
          example: 20.0
        completedAt:
          type: string
          format: date-time
          description: "완료 시간"
          example: "2024-01-31T23:59:59Z"

    # ML Signals DTOs
    TradingSignalResponse:
      type: object
      properties:
        signalId:
          type: string
          description: "시그널 ID"
          example: "ml_signal_123"
        symbol:
          type: string
          description: "주식 심볼"
          example: "A"
        signalType:
          type: string
          enum: [BUY, SELL, HOLD]
          description: "시그널 타입"
          example: "BUY"
        strength:
          type: string
          enum: [WEAK, MODERATE, STRONG]
          description: "시그널 강도"
          example: "STRONG"
        confidence:
          type: string
          description: "신뢰도"
          example: "85.5"
        expectedReturn:
          type: string
          description: "예상 수익률"
          example: "12.5"
        expectedRisk:
          type: string
          description: "예상 위험도"
          example: "8.2"
        timeHorizon:
          type: integer
          description: "투자 기간 (일)"
          example: 30
        targetPrice:
          type: string
          description: "목표 가격"
          example: "150.00"
        stopLossPrice:
          type: string
          description: "손절 가격"
          example: "140.00"
        generatedAt:
          type: string
          format: date-time
          description: "시그널 생성 시간"
          example: "2024-01-15T12:00:00Z"
        expiresAt:
          type: string
          format: date-time
          description: "시그널 만료 시간"
          example: "2024-02-15T12:00:00Z"
        status:
          type: string
          enum: [ACTIVE, EXPIRED, TRIGGERED]
          description: "시그널 상태"
          example: "ACTIVE"
        topReasons:
          type: array
          description: "주요 근거"
          items:
            $ref: '#/components/schemas/SignalReasonResponse'
        marketCondition:
          $ref: '#/components/schemas/MarketConditionResponse'

    SignalReasonResponse:
      type: object
      properties:
        featureName:
          type: string
          description: "특성 이름"
          example: "RSI"
        importance:
          type: string
          description: "중요도"
          example: "0.75"
        value:
          type: string
          description: "값"
          example: "25.5"
        description:
          type: string
          description: "설명"
          example: "과매도 구간 진입"
        category:
          type: string
          enum: [TECHNICAL, FUNDAMENTAL, SENTIMENT]
          description: "카테고리"
          example: "TECHNICAL"

    MarketConditionResponse:
      type: object
      properties:
        regime:
          type: string
          enum: [BULL, BEAR, SIDEWAYS, VOLATILE]
          description: "시장 상황"
          example: "BULL"
        volatility:
          type: string
          enum: [LOW, MEDIUM, HIGH]
          description: "변동성"
          example: "MEDIUM"
        liquidity:
          type: string
          enum: [LOW, MEDIUM, HIGH]
          description: "유동성"
          example: "HIGH"
        marketSentiment:
          type: string
          description: "시장 심리"
          example: "75.5"
        vixLevel:
          type: string
          description: "VIX 수준"
          example: "18.5"

    BatchSignalRequest:
      type: object
      required:
        - symbols
      properties:
        symbols:
          type: array
          minItems: 1
          maxItems: 50
          items:
            type: string
          description: "주식 심볼 목록"
          example: ["A", "B", "C"]

    BatchSignalResponse:
      type: object
      properties:
        signals:
          type: array
          items:
            $ref: '#/components/schemas/TradingSignalResponse'
        totalCount:
          type: integer
          description: "총 시그널 수"
          example: 3

    FilterSignalsRequest:
      type: object
      required:
        - symbols
        - marketRegime
      properties:
        symbols:
          type: array
          minItems: 1
          maxItems: 100
          items:
            type: string
          description: "주식 심볼 목록"
          example: ["A", "B", "C", "D", "E"]
        marketRegime:
          type: string
          enum: [BULL, BEAR, SIDEWAYS, VOLATILE]
          description: "시장 상황"
          example: "BULL"

    FilteredSignalResponse:
      type: object
      properties:
        filteredSignals:
          type: array
          items:
            $ref: '#/components/schemas/TradingSignalResponse'
        totalOriginalCount:
          type: integer
          description: "원본 시그널 수"
          example: 5
        filteredCount:
          type: integer
          description: "필터링된 시그널 수"
          example: 3
        marketRegime:
          type: string
          enum: [BULL, BEAR, SIDEWAYS, VOLATILE]
          description: "적용된 시장 상황"
          example: "BULL"

    PerformanceUpdateRequest:
      type: object
      properties:
        currentPrice:
          type: string
          description: "현재 가격"
          example: "145.00"
        unrealizedReturn:
          type: string
          description: "미실현 수익률"
          example: "5.2"
        maxReturn:
          type: string
          description: "최대 수익률"
          example: "8.5"
        maxDrawdown:
          type: string
          description: "최대 손실률"
          example: "-2.1"

    PerformanceUpdateResponse:
      type: object
      properties:
        signalId:
          type: string
          description: "시그널 ID"
          example: "ml_signal_123"
        updated:
          type: boolean
          description: "업데이트 성공 여부"
          example: true
        message:
          type: string
          description: "메시지"
          example: "성과 정보가 성공적으로 업데이트되었습니다"

    ActiveSignalsResponse:
      type: object
      properties:
        activeSignals:
          type: array
          items:
            $ref: '#/components/schemas/TradingSignalResponse'
        count:
          type: integer
          description: "활성 시그널 수"
          example: 5

    # Risk Management DTOs
    VaRResponse:
      type: object
      properties:
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        confidenceLevel:
          type: number
          format: double
          description: "신뢰수준 (%)"
          example: 95.0
        timeHorizon:
          type: integer
          description: "시간 지평 (일)"
          example: 1
        value:
          type: string
          description: "VaR 값"
          example: "50000.00"
        percentage:
          type: string
          description: "VaR 비율 (%)"
          example: "5.2"
        riskRating:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
          description: "리스크 등급"
          example: "MEDIUM"
        calculatedAt:
          type: string
          format: date-time
          description: "계산 시간"
          example: "2024-01-15T12:00:00Z"

    RiskAlert:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "알림 ID"
          example: 456
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        alertType:
          type: string
          enum: [VAR_BREACH, CONCENTRATION_RISK, VOLATILITY_SPIKE, CORRELATION_RISK]
          description: "알림 유형"
          example: "VAR_BREACH"
        severity:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
          description: "심각도"
          example: "HIGH"
        message:
          type: string
          description: "알림 메시지"
          example: "포트폴리오 VaR가 설정된 한도를 초과했습니다"
        currentValue:
          type: string
          description: "현재 값"
          example: "75000.00"
        thresholdValue:
          type: string
          description: "임계값"
          example: "50000.00"
        status:
          type: string
          enum: [ACTIVE, RESOLVED, ACKNOWLEDGED]
          description: "알림 상태"
          example: "ACTIVE"
        triggeredAt:
          type: string
          format: date-time
          description: "발생 시간"
          example: "2024-01-15T11:30:00Z"
        resolvedAt:
          type: string
          format: date-time
          description: "해결 시간"
          example: "2024-01-15T12:30:00Z"

    RiskAlertsResponse:
      type: object
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/RiskAlert'
        totalCount:
          type: integer
          description: "전체 알림 수"
          example: 3
        activeCount:
          type: integer
          description: "활성 알림 수"
          example: 2

    RiskDashboardResponse:
      type: object
      properties:
        overallRiskScore:
          type: string
          description: "전체 리스크 점수"
          example: "7.2"
        riskRating:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
          description: "리스크 등급"
          example: "MEDIUM"
        totalPortfolioValue:
          type: string
          description: "전체 포트폴리오 가치"
          example: "1000000.00"
        var95:
          type: string
          description: "95% VaR"
          example: "50000.00"
        var99:
          type: string
          description: "99% VaR"
          example: "75000.00"
        portfolioVolatility:
          type: string
          description: "포트폴리오 변동성"
          example: "15.2"
        sharpeRatio:
          type: string
          description: "샤프 비율"
          example: "1.25"
        maxDrawdown:
          type: string
          description: "최대 손실률"
          example: "-8.5"
        concentrationRisk:
          type: string
          description: "집중 리스크"
          example: "12.8"
        activeAlerts:
          type: array
          items:
            $ref: '#/components/schemas/RiskAlert'
        riskBreakdown:
          type: object
          properties:
            marketRisk:
              type: string
              example: "40.0"
            creditRisk:
              type: string
              example: "20.0"
            liquidityRisk:
              type: string
              example: "15.0"
            concentrationRisk:
              type: string
              example: "25.0"

    RiskAlertConfigRequest:
      type: object
      properties:
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        varThreshold:
          type: string
          description: "VaR 임계값"
          example: "50000.00"
        volatilityThreshold:
          type: string
          description: "변동성 임계값"
          example: "20.0"
        concentrationThreshold:
          type: string
          description: "집중도 임계값"
          example: "30.0"
        notificationEnabled:
          type: boolean
          description: "알림 활성화 여부"
          example: true
        emailNotification:
          type: boolean
          description: "이메일 알림 여부"
          example: true

    RiskAlertConfigResponse:
      type: object
      properties:
        configId:
          type: integer
          format: int64
          description: "설정 ID"
          example: 789
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        configured:
          type: boolean
          description: "설정 완료 여부"
          example: true
        message:
          type: string
          description: "메시지"
          example: "리스크 알림 설정이 완료되었습니다"

    RiskLimitsUpdateRequest:
      type: object
      properties:
        maxVaR:
          type: string
          description: "최대 VaR 한도"
          example: "100000.00"
        maxVolatility:
          type: string
          description: "최대 변동성 한도"
          example: "25.0"
        maxConcentration:
          type: string
          description: "최대 집중도 한도"
          example: "40.0"
        maxDrawdown:
          type: string
          description: "최대 손실률 한도"
          example: "15.0"

    RiskLimitsUpdateResponse:
      type: object
      properties:
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        updated:
          type: boolean
          description: "업데이트 완료 여부"
          example: true
        message:
          type: string
          description: "메시지"
          example: "리스크 한도가 성공적으로 업데이트되었습니다"
        appliedAt:
          type: string
          format: date-time
          description: "적용 시간"
          example: "2024-01-15T12:00:00Z"

    # Portfolio Optimization DTOs
    OptimizationRequest:
      type: object
      required:
        - optimizationType
        - objective
      properties:
        optimizationType:
          type: string
          enum: [MODERN_PORTFOLIO_THEORY, BLACK_LITTERMAN, RISK_PARITY, EQUAL_WEIGHT]
          description: "최적화 유형"
          example: "MODERN_PORTFOLIO_THEORY"
        objective:
          type: string
          enum: [MAXIMIZE_RETURN, MINIMIZE_RISK, MAXIMIZE_SHARPE_RATIO, TARGET_VOLATILITY]
          description: "최적화 목표"
          example: "MAXIMIZE_SHARPE_RATIO"
        maxWeight:
          type: string
          description: "최대 종목 비중"
          example: "0.3"
        minWeight:
          type: string
          description: "최소 종목 비중"
          example: "0.05"
        targetVolatility:
          type: string
          description: "목표 변동성"
          example: "0.15"

    PortfolioOptimizationResponse:
      type: object
      properties:
        optimizationId:
          type: string
          description: "최적화 ID"
          example: "opt_12345"
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        optimizationType:
          type: string
          description: "최적화 유형"
          example: "MODERN_PORTFOLIO_THEORY"
        objective:
          type: string
          description: "최적화 목표"
          example: "MAXIMIZE_SHARPE_RATIO"
        recommendedAllocations:
          type: array
          items:
            $ref: '#/components/schemas/AssetAllocationResponse'
          description: "권장 자산 배분"
        currentAllocations:
          type: array
          items:
            $ref: '#/components/schemas/AssetAllocationResponse'
          description: "현재 자산 배분"
        rebalancingActions:
          type: array
          items:
            $ref: '#/components/schemas/RebalancingActionResponse'
          description: "리밸런싱 액션"
        expectedPerformance:
          $ref: '#/components/schemas/ExpectedPerformanceResponse'
        riskMetrics:
          $ref: '#/components/schemas/RiskMetricsResponse'
        generatedAt:
          type: string
          format: date-time
          description: "생성 시간"
          example: "2024-01-15T12:00:00Z"
        nextRebalancingDate:
          type: string
          format: date-time
          description: "다음 리밸런싱 날짜"
          example: "2024-02-15T12:00:00Z"
        confidence:
          type: string
          description: "신뢰도"
          example: "85.5"

    AssetAllocationResponse:
      type: object
      properties:
        symbol:
          type: string
          description: "종목 심볼"
          example: "A"
        assetName:
          type: string
          description: "자산명"
          example: "종목 A"
        category:
          type: string
          description: "자산 카테고리"
          example: "STOCK"
        recommendedWeight:
          type: string
          description: "권장 비중"
          example: "25.5"
        currentWeight:
          type: string
          description: "현재 비중"
          example: "20.0"
        expectedReturn:
          type: string
          description: "예상 수익률"
          example: "12.5"
        expectedVolatility:
          type: string
          description: "예상 변동성"
          example: "15.2"
        riskContribution:
          type: string
          description: "리스크 기여도"
          example: "18.3"
        allocationConfidence:
          type: string
          description: "배분 신뢰도"
          example: "88.7"

    RebalancingActionResponse:
      type: object
      properties:
        actionType:
          type: string
          enum: [BUY, SELL, HOLD]
          description: "액션 유형"
          example: "BUY"
        symbol:
          type: string
          description: "종목 심볼"
          example: "A"
        quantity:
          type: string
          description: "수량"
          example: "100"
        amount:
          type: string
          description: "금액"
          example: "50000.00"
        priority:
          type: integer
          description: "우선순위"
          example: 1
        recommendedExecutionTime:
          type: string
          format: date-time
          description: "권장 실행 시간"
          example: "2024-01-15T14:30:00Z"
        estimatedCost:
          type: string
          description: "예상 비용"
          example: "500.00"
        marketImpact:
          type: string
          description: "시장 영향도"
          example: "0.05"
        reason:
          type: string
          description: "리밸런싱 사유"
          example: "비중 조정 필요"

    ExpectedPerformanceResponse:
      type: object
      properties:
        expectedReturn:
          type: string
          description: "예상 수익률"
          example: "12.5"
        expectedVolatility:
          type: string
          description: "예상 변동성"
          example: "15.2"
        expectedSharpeRatio:
          type: string
          description: "예상 샤프 비율"
          example: "0.82"
        expectedMaxDrawdown:
          type: string
          description: "예상 최대 낙폭"
          example: "8.5"
        beta:
          type: string
          description: "베타"
          example: "0.95"
        trackingError:
          type: string
          description: "추적 오차"
          example: "3.2"

    RiskMetricsResponse:
      type: object
      properties:
        var95:
          type: string
          description: "95% VaR"
          example: "45000.00"
        cvar95:
          type: string
          description: "95% CVaR"
          example: "62000.00"
        diversificationRatio:
          type: string
          description: "다각화 비율"
          example: "0.78"
        concentrationRisk:
          type: string
          description: "집중 리스크"
          example: "25.5"
        liquidityRisk:
          type: string
          description: "유동성 리스크"
          example: "LOW"

    EfficientFrontierRequest:
      type: object
      properties:
        points:
          type: integer
          default: 20
          description: "프론티어 점의 수"
          example: 20
        riskLevels:
          type: array
          items:
            type: string
          description: "리스크 레벨 목록"
          example: ["0.10", "0.15", "0.20", "0.25", "0.30"]
        maxWeight:
          type: string
          description: "최대 비중"
          example: "0.4"
        minWeight:
          type: string
          description: "최소 비중"
          example: "0.05"

    EfficientFrontierResponse:
      type: object
      properties:
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        frontierPoints:
          type: array
          items:
            $ref: '#/components/schemas/FrontierPoint'
          description: "효율적 프론티어 점들"

    FrontierPoint:
      type: object
      properties:
        risk:
          type: string
          description: "위험도"
          example: "15.2"
        return:
          type: string
          description: "수익률"
          example: "12.5"
        sharpeRatio:
          type: string
          description: "샤프 비율"
          example: "0.82"

    RebalancingSuggestionsResponse:
      type: object
      properties:
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/RebalancingActionResponse'
          description: "리밸런싱 제안"
        totalSuggestions:
          type: integer
          description: "총 제안 수"
          example: 5

    OptimizationHistoryResponse:
      type: object
      properties:
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        optimizations:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioOptimizationResponse'
          description: "최적화 이력"
        totalCount:
          type: integer
          description: "총 이력 수"
          example: 15

    BacktestRequest:
      type: object
      required:
        - startDate
        - endDate
      properties:
        startDate:
          type: string
          format: date-time
          description: "백테스트 시작 날짜"
          example: "2023-01-01T00:00:00Z"
        endDate:
          type: string
          format: date-time
          description: "백테스트 종료 날짜"
          example: "2023-12-31T00:00:00Z"
        optimizationType:
          type: string
          enum: [MODERN_PORTFOLIO_THEORY, BLACK_LITTERMAN, RISK_PARITY, EQUAL_WEIGHT]
          default: "MODERN_PORTFOLIO_THEORY"
          description: "최적화 유형"
          example: "MODERN_PORTFOLIO_THEORY"
        objective:
          type: string
          enum: [MAXIMIZE_RETURN, MINIMIZE_RISK, MAXIMIZE_SHARPE_RATIO, TARGET_VOLATILITY]
          default: "MAXIMIZE_SHARPE_RATIO"
          description: "최적화 목표"
          example: "MAXIMIZE_SHARPE_RATIO"

    BacktestResponse:
      type: object
      properties:
        portfolioId:
          type: integer
          format: int64
          description: "포트폴리오 ID"
          example: 123
        startDate:
          type: string
          format: date-time
          description: "백테스트 시작 날짜"
          example: "2023-01-01T00:00:00Z"
        endDate:
          type: string
          format: date-time
          description: "백테스트 종료 날짜"
          example: "2023-12-31T00:00:00Z"
        totalReturn:
          type: string
          description: "총 수익률"
          example: "15.0"
        volatility:
          type: string
          description: "변동성"
          example: "12.0"
        sharpeRatio:
          type: string
          description: "샤프 비율"
          example: "1.25"
        maxDrawdown:
          type: string
          description: "최대 낙폭"
          example: "8.0"
        performanceData:
          type: array
          items:
            $ref: '#/components/schemas/PerformancePoint'
          description: "성과 데이터"

    PerformancePoint:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: "날짜"
          example: "2023-01-01T00:00:00Z"
        portfolioValue:
          type: string
          description: "포트폴리오 가치"
          example: "1050000.00"
        benchmarkValue:
          type: string
          description: "벤치마크 가치"
          example: "1030000.00"
        cumulativeReturn:
          type: string
          description: "누적 수익률"
          example: "5.0"

    # Blog Content Schemas
    ArticleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "글 ID"
          example: 1
        title:
          type: string
          description: "제목"
          example: "주식 투자 초보자를 위한 가이드"
        slug:
          type: string
          description: "슬러그"
          example: "stock-investment-guide-for-beginners"
        summary:
          type: string
          description: "요약"
          example: "주식 투자를 시작하는 초보자를 위한 기본 가이드입니다."
        content:
          type: string
          description: "본문 내용"
          example: "주식 투자는..."
        authorId:
          type: integer
          format: int64
          description: "작성자 ID"
          example: 1
        authorNickname:
          type: string
          description: "작성자 닉네임"
          example: "투자전문가"
        categoryId:
          type: integer
          format: int64
          description: "카테고리 ID"
          example: 1
        categoryName:
          type: string
          description: "카테고리 이름"
          example: "주식 기초"
        status:
          type: string
          enum: [DRAFT, PUBLISHED, ARCHIVED]
          description: "글 상태"
          example: "PUBLISHED"
        featured:
          type: boolean
          description: "추천 글 여부"
          example: true
        viewCount:
          type: integer
          format: int64
          description: "조회수"
          example: 1250
        likeCount:
          type: integer
          format: int64
          description: "좋아요 수"
          example: 85
        commentCount:
          type: integer
          format: int64
          description: "댓글 수"
          example: 12
        readingTimeMinutes:
          type: integer
          description: "읽기 시간 (분)"
          example: 5
        readingTimeDisplay:
          type: string
          description: "읽기 시간 표시"
          example: "5분 소요"
        difficulty:
          type: string
          enum: [BEGINNER, INTERMEDIATE, ADVANCED]
          description: "난이도"
          example: "BEGINNER"
        difficultyDisplay:
          type: string
          description: "난이도 표시"
          example: "초급"
        seoTitle:
          type: string
          description: "SEO 제목"
          example: "주식 투자 초보자 가이드 - 기초부터 시작하는 투자 전략"
        metaDescription:
          type: string
          description: "메타 설명"
          example: "주식 투자를 처음 시작하는 초보자를 위한 완벽한 가이드. 기본 개념부터 실전 전략까지 단계별로 설명합니다."
        seoKeywords:
          type: string
          description: "SEO 키워드"
          example: "주식투자, 초보자, 투자가이드, 주식기초"
        canonicalUrl:
          type: string
          description: "정규 URL"
          example: "https://stockquest.com/blog/stock-investment-guide-for-beginners"
        ogTitle:
          type: string
          description: "OpenGraph 제목"
          example: "주식 투자 초보자를 위한 가이드"
        ogDescription:
          type: string
          description: "OpenGraph 설명"
          example: "주식 투자를 처음 시작하는 초보자를 위한 완벽한 가이드"
        ogImageUrl:
          type: string
          description: "OpenGraph 이미지 URL"
          example: "https://stockquest.com/images/stock-guide-cover.jpg"
        twitterCardType:
          type: string
          description: "트위터 카드 타입"
          example: "summary_large_image"
        twitterTitle:
          type: string
          description: "트위터 제목"
          example: "주식 투자 초보자를 위한 가이드"
        twitterDescription:
          type: string
          description: "트위터 설명"
          example: "주식 투자를 처음 시작하는 초보자를 위한 완벽한 가이드"
        twitterImageUrl:
          type: string
          description: "트위터 이미지 URL"
          example: "https://stockquest.com/images/stock-guide-twitter.jpg"
        indexable:
          type: boolean
          description: "검색엔진 인덱싱 허용 여부"
          example: true
        followable:
          type: boolean
          description: "검색엔진 링크 따라가기 허용 여부"
          example: true
        schemaType:
          type: string
          description: "스키마 타입"
          example: "Article"
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagResponse'
          description: "태그 목록"
        tagNames:
          type: string
          description: "태그 이름들 (쉼표로 구분)"
          example: "주식, 투자, 기초, 초보자"
        publishedAt:
          type: string
          format: date-time
          description: "발행 일시"
          example: "2024-01-15T09:00:00Z"
        createdAt:
          type: string
          format: date-time
          description: "생성 일시"
          example: "2024-01-15T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "수정 일시"
          example: "2024-01-15T10:15:00Z"

    ArticleSearchResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ArticleResponse'
          description: "글 목록"
        totalElements:
          type: integer
          format: int64
          description: "전체 글 수"
          example: 156
        totalPages:
          type: integer
          description: "전체 페이지 수"
          example: 8
        currentPage:
          type: integer
          description: "현재 페이지"
          example: 0
        size:
          type: integer
          description: "페이지 크기"
          example: 20
        first:
          type: boolean
          description: "첫 페이지 여부"
          example: true
        last:
          type: boolean
          description: "마지막 페이지 여부"
          example: false
        numberOfElements:
          type: integer
          description: "현재 페이지 글 수"
          example: 20
        empty:
          type: boolean
          description: "빈 페이지 여부"
          example: false

    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "카테고리 ID"
          example: 1
        name:
          type: string
          description: "카테고리 이름"
          example: "주식 기초"
        slug:
          type: string
          description: "카테고리 슬러그"
          example: "stock-basics"
        description:
          type: string
          description: "카테고리 설명"
          example: "주식 투자의 기본 개념과 원리를 다루는 카테고리입니다."
        parentId:
          type: integer
          format: int64
          description: "부모 카테고리 ID"
          example: null
        parentName:
          type: string
          description: "부모 카테고리 이름"
          example: null
        colorCode:
          type: string
          description: "카테고리 색상 코드"
          example: "#3B82F6"
        icon:
          type: string
          description: "카테고리 아이콘"
          example: "📈"
        articleCount:
          type: integer
          format: int64
          description: "글 수"
          example: 23
        articleCountDisplay:
          type: string
          description: "글 수 표시"
          example: "23개 글"
        sortOrder:
          type: integer
          description: "정렬 순서"
          example: 1
        active:
          type: boolean
          description: "활성 상태"
          example: true
        featuredOnHome:
          type: boolean
          description: "홈페이지 추천 여부"
          example: true
        seoTitle:
          type: string
          description: "SEO 제목"
          example: "주식 기초 - 투자 초보자를 위한 필수 지식"
        metaDescription:
          type: string
          description: "메타 설명"
          example: "주식 투자의 기본 개념과 원리를 배우는 초보자를 위한 카테고리입니다."
        seoKeywords:
          type: string
          description: "SEO 키워드"
          example: "주식기초, 투자기초, 주식투자입문"
        children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse'
          description: "하위 카테고리 목록"
        level:
          type: integer
          description: "카테고리 레벨"
          example: 0
        levelIndent:
          type: string
          description: "레벨 들여쓰기"
          example: ""
        createdAt:
          type: string
          format: date-time
          description: "생성 일시"
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "수정 일시"
          example: "2024-01-15T10:30:00Z"

    TagResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "태그 ID"
          example: 1
        name:
          type: string
          description: "태그 이름"
          example: "주식"
        slug:
          type: string
          description: "태그 슬러그"
          example: "stock"
        description:
          type: string
          description: "태그 설명"
          example: "주식 투자 관련 콘텐츠"
        type:
          type: string
          enum: [GENERAL, TECHNICAL, LEVEL, STRATEGY]
          description: "태그 타입"
          example: "GENERAL"
        typeDisplay:
          type: string
          description: "태그 타입 표시"
          example: "일반"
        colorCode:
          type: string
          description: "태그 색상 코드"
          example: "#10B981"
        articleCount:
          type: integer
          format: int64
          description: "관련 글 수"
          example: 45
        articleCountDisplay:
          type: string
          description: "관련 글 수 표시"
          example: "45개 글"
        popularityScore:
          type: integer
          description: "인기도 점수"
          example: 95
        active:
          type: boolean
          description: "활성 상태"
          example: true
        createdAt:
          type: string
          format: date-time
          description: "생성 일시"
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "수정 일시"
          example: "2024-01-15T10:30:00Z"