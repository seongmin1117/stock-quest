openapi: 3.0.3
info:
  title: StockQuest API
  description: Stock Trading Simulation Platform API
  version: 1.0.0
  contact:
    name: StockQuest Team
    email: team@stockquest.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.stockquest.com
    description: Production server

tags:
  - name: 인증
    description: "사용자 인증 관련 API"
  - name: 챌린지
    description: "투자 챌린지 관련 API"
  - name: 챌린지 세션
    description: "챌린지 세션 및 거래 관련 API"
  - name: 커뮤니티
    description: "사용자 커뮤니티 관련 API"
  - name: 리더보드
    description: "순위 및 성과 관련 API"
  - name: 관리자
    description: "관리자 전용 API"

paths:
  # Authentication APIs
  /api/auth/signup:
    post:
      tags:
        - 인증
      summary: 회원가입
      description: "새로운 사용자 계정을 생성합니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: "회원가입 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - 인증
      summary: 로그인
      description: "이메일과 비밀번호로 로그인하며, JWT 토큰을 발급받습니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "로그인 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/me:
    get:
      tags:
        - 인증
      summary: 현재 사용자 조회
      description: "JWT 토큰 기반으로 현재 인증된 사용자 정보를 조회합니다"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      tags:
        - 인증
      summary: 토큰 갱신
      description: "리프레시 토큰으로 새로운 액세스 토큰을 발급받습니다"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: "토큰 갱신 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "리프레시 토큰 만료 또는 유효하지 않음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      tags:
        - 인증
      summary: 로그아웃
      description: "현재 세션을 종료하고 토큰을 무효화합니다"
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: "로그아웃 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Challenge APIs
  /api/challenges:
    get:
      tags:
        - 챌린지
      summary: 챌린지 목록 조회
      description: "활성 상태의 챌린지 목록을 조회합니다"
      parameters:
        - name: page
          in: query
          description: "페이지 번호 (0부터 시작)"
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: "페이지 크기"
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeListResponse'

  /api/challenges/{challengeId}:
    get:
      tags:
        - 챌린지
      summary: 챌린지 상세 조회
      description: "특정 챌린지의 상세 정보를 조회합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeDetailResponse'
        '404':
          description: "챌린지를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/challenges/{challengeId}/start:
    post:
      tags:
        - 챌린지
      summary: 챌린지 시작
      description: "새로운 챌린지 세션을 시작합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "챌린지 시작 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartChallengeResponse'
        '400':
          description: "잘못된 요청 (이미 참여 중인 챌린지 등)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Session APIs
  /api/sessions/{sessionId}:
    get:
      tags:
        - 챌린지 세션
      summary: 세션 상세 조회
      description: "챌린지 세션의 상세 정보를 조회합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: "세션 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetailResponse'
        '404':
          description: "세션을 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/sessions/{sessionId}/orders:
    post:
      tags:
        - 챌린지 세션
      summary: 주문 실행
      description: "챌린지 세션에서 주문을 실행합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: "세션 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        '200':
          description: "주문 실행 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceOrderResponse'
        '400':
          description: "잘못된 주문 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/sessions/{sessionId}/close:
    post:
      tags:
        - 챌린지 세션
      summary: 챌린지 종료
      description: "챌린지 세션을 종료하고 결과를 확인합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: "세션 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "챌린지 종료 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseChallengeResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Community APIs
  /api/challenges/{challengeId}/posts:
    post:
      tags:
        - 커뮤니티
      summary: 게시글 작성
      description: "특정 챌린지에 게시글을 작성합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: "게시글 작성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - 커뮤니티
      summary: 게시글 목록 조회
      description: "특정 챌린지의 게시글 목록을 조회합니다"
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'

  /api/challenges/{challengeId}/posts/{postId}/comments:
    post:
      tags:
        - 커뮤니티
      summary: 댓글 작성
      description: "특정 게시글에 댓글을 작성합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
        - name: postId
          in: path
          required: true
          description: "게시글 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '200':
          description: "댓글 작성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - 커뮤니티
      summary: 댓글 목록 조회
      description: "특정 게시글의 댓글 목록을 조회합니다"
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
        - name: postId
          in: path
          required: true
          description: "게시글 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponse'

  # Leaderboard APIs
  /api/challenges/{challengeId}/leaderboard:
    get:
      tags:
        - 리더보드
      summary: 리더보드 조회
      description: "특정 챌린지의 리더보드를 조회합니다"
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: "조회할 순위 수"
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: "조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardResponse'

  /api/challenges/{challengeId}/leaderboard/calculate:
    post:
      tags:
        - 리더보드
      summary: 리더보드 계산
      description: "챌린지 종료 후 리더보드를 계산합니다"
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          description: "챌린지 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "계산 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Request DTOs
    SignupRequest:
      type: object
      required:
        - email
        - password
        - nickname
      properties:
        email:
          type: string
          format: email
          description: "사용자 이메일"
          example: user@example.com
        password:
          type: string
          description: "비밀번호 (최소 8자, 대소문자, 숫자, 특수문자 포함)"
          example: Password123!
        nickname:
          type: string
          description: "사용자 닉네임"
          example: 투자왕김첨지

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: "사용자 이메일"
          example: user@example.com
        password:
          type: string
          description: "비밀번호"
          example: Password123!
        redirectUrl:
          type: string
          description: "로그인 성공 후 리다이렉트할 URL"
          example: /dashboard

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: "리프레시 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    LogoutRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: "리프레시 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        logoutFromAllDevices:
          type: boolean
          description: "모든 기기에서 로그아웃 여부"
          default: false

    PlaceOrderRequest:
      type: object
      required:
        - instrumentKey
        - side
        - quantity
        - orderType
      properties:
        instrumentKey:
          type: string
          description: "투자 상품 키 (예: AAPL, TSLA)"
          example: AAPL
        side:
          type: string
          enum: [BUY, SELL]
          description: "주문 방향"
          example: BUY
        quantity:
          type: integer
          minimum: 1
          description: "주문 수량"
          example: 10
        orderType:
          type: string
          enum: [MARKET, LIMIT]
          description: "주문 유형"
          example: MARKET
        limitPrice:
          type: number
          format: double
          description: "지정가 주문 시 가격 (LIMIT 주문에서만 사용)"
          example: 150.00

    # Response DTOs
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: "JWT 액세스 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: "JWT 리프레시 토큰"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        accessTokenExpiresAt:
          type: string
          format: date-time
          description: "액세스 토큰 만료 시간"
          example: "2024-01-15T12:00:00Z"
        refreshTokenExpiresAt:
          type: string
          format: date-time
          description: "리프레시 토큰 만료 시간"
          example: "2024-02-15T12:00:00Z"
        userId:
          type: integer
          format: int64
          description: "사용자 ID"
          example: 1
        email:
          type: string
          format: email
          description: "사용자 이메일"
          example: user@example.com
        nickname:
          type: string
          description: "사용자 닉네임"
          example: 투자왕김첨지
        redirectUrl:
          type: string
          description: "리다이렉트 URL"
          example: /dashboard

    ChallengeListResponse:
      type: object
      properties:
        challenges:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeItem'
        page:
          type: integer
          description: "현재 페이지 번호"
          example: 0
        size:
          type: integer
          description: "페이지 크기"
          example: 10
        totalElements:
          type: integer
          format: int64
          description: "전체 요소 수"
          example: 25
        totalPages:
          type: integer
          description: "전체 페이지 수"
          example: 3

    ChallengeItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        title:
          type: string
          description: "챌린지 제목"
          example: "기초 투자 챌린지"
        description:
          type: string
          description: "챌린지 설명"
          example: "기본적인 주식 투자를 배워보는 챌린지"
        difficultyLevel:
          type: string
          enum: [BEGINNER, INTERMEDIATE, ADVANCED]
          description: "난이도"
          example: BEGINNER
        startDate:
          type: string
          format: date-time
          description: "시작 일시"
          example: "2024-01-01T00:00:00Z"
        endDate:
          type: string
          format: date-time
          description: "종료 일시"
          example: "2024-01-31T23:59:59Z"
        participantCount:
          type: integer
          description: "참여자 수"
          example: 127
        maxParticipants:
          type: integer
          description: "최대 참여자 수"
          example: 1000

    ChallengeDetailResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        title:
          type: string
          description: "챌린지 제목"
          example: "기초 투자 챌린지"
        description:
          type: string
          description: "챌린지 설명"
        difficultyLevel:
          type: string
          enum: [BEGINNER, INTERMEDIATE, ADVANCED]
          description: "난이도"
        startDate:
          type: string
          format: date-time
          description: "시작 일시"
        endDate:
          type: string
          format: date-time
          description: "종료 일시"
        seedBalance:
          type: number
          format: double
          description: "시드머니"
          example: 1000000.00
        participantCount:
          type: integer
          description: "참여자 수"
        maxParticipants:
          type: integer
          description: "최대 참여자 수"
        instruments:
          type: array
          items:
            type: string
          description: "사용 가능한 투자 상품 목록"
          example: ["AAPL", "TSLA", "MSFT"]
        userParticipation:
          type: object
          properties:
            isParticipating:
              type: boolean
              description: "사용자 참여 여부"
            sessionId:
              type: integer
              format: int64
              description: "세션 ID (참여 중인 경우)"

    StartChallengeResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
          description: "생성된 세션 ID"
          example: 123
        challengeId:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        seedBalance:
          type: number
          format: double
          description: "시드머니"
          example: 1000000.00
        status:
          type: string
          enum: [ACTIVE, COMPLETED, CANCELLED]
          description: "세션 상태"
          example: ACTIVE

    SessionDetailResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
          description: "세션 ID"
        challengeId:
          type: integer
          format: int64
          description: "챌린지 ID"
        challengeTitle:
          type: string
          description: "챌린지 제목"
        status:
          type: string
          enum: [ACTIVE, COMPLETED, CANCELLED]
          description: "세션 상태"
        seedBalance:
          type: number
          format: double
          description: "시드머니"
        currentBalance:
          type: number
          format: double
          description: "현재 잔액"
        totalValue:
          type: number
          format: double
          description: "총 자산 가치"
        profitLoss:
          type: number
          format: double
          description: "손익"
        profitLossPercent:
          type: number
          format: double
          description: "손익률 (%)"
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    Position:
      type: object
      properties:
        instrumentKey:
          type: string
          description: "투자 상품 키"
        quantity:
          type: integer
          description: "보유 수량"
        averagePrice:
          type: number
          format: double
          description: "평균 단가"
        currentPrice:
          type: number
          format: double
          description: "현재 가격"
        marketValue:
          type: number
          format: double
          description: "시장 가치"
        unrealizedPL:
          type: number
          format: double
          description: "미실현 손익"

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "주문 ID"
        instrumentKey:
          type: string
          description: "투자 상품 키"
        side:
          type: string
          enum: [BUY, SELL]
          description: "주문 방향"
        quantity:
          type: integer
          description: "주문 수량"
        orderType:
          type: string
          enum: [MARKET, LIMIT]
          description: "주문 유형"
        limitPrice:
          type: number
          format: double
          description: "지정가 (LIMIT 주문인 경우)"
        executedPrice:
          type: number
          format: double
          description: "체결 가격"
        status:
          type: string
          enum: [PENDING, FILLED, CANCELLED, REJECTED]
          description: "주문 상태"
        executedAt:
          type: string
          format: date-time
          description: "체결 시간"

    PlaceOrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          description: "주문 ID"
        status:
          type: string
          enum: [PENDING, FILLED, CANCELLED, REJECTED]
          description: "주문 상태"
        executedPrice:
          type: number
          format: double
          description: "체결 가격"
        commission:
          type: number
          format: double
          description: "수수료"
        slippage:
          type: number
          format: double
          description: "슬리피지"
        executedAt:
          type: string
          format: date-time
          description: "체결 시간"

    CloseChallengeResponse:
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
          description: "세션 ID"
        finalBalance:
          type: number
          format: double
          description: "최종 잔액"
        totalValue:
          type: number
          format: double
          description: "총 자산 가치"
        profitLoss:
          type: number
          format: double
          description: "최종 손익"
        profitLossPercent:
          type: number
          format: double
          description: "최종 손익률 (%)"
        rank:
          type: integer
          description: "최종 순위"
        totalParticipants:
          type: integer
          description: "전체 참여자 수"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: "오류 메시지"
          example: "잘못된 요청입니다"
        error:
          type: string
          description: "오류 코드"
          example: "INVALID_REQUEST"
        status:
          type: integer
          description: "HTTP 상태 코드"
          example: 400
        path:
          type: string
          description: "요청 경로"
          example: "/api/auth/login"
        timestamp:
          type: string
          format: date-time
          description: "오류 발생 시간"
          example: "2024-01-15T12:00:00Z"

    # Community DTOs
    CreatePostRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: "게시글 내용"
          example: "오늘 AAPL 주식을 매수했습니다. 좋은 선택이었을까요?"

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: "댓글 내용"
          example: "좋은 선택이라고 생각합니다!"

    PostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "게시글 ID"
          example: 1
        challengeId:
          type: integer
          format: int64
          description: "챌린지 ID"
          example: 1
        userId:
          type: integer
          format: int64
          description: "작성자 ID"
          example: 1
        userNickname:
          type: string
          description: "작성자 닉네임"
          example: "투자왕김첨지"
        content:
          type: string
          description: "게시글 내용"
          example: "오늘 AAPL 주식을 매수했습니다. 좋은 선택이었을까요?"
        createdAt:
          type: string
          format: date-time
          description: "작성 시간"
          example: "2024-01-15T12:00:00Z"
        commentCount:
          type: integer
          description: "댓글 수"
          example: 5

    CommentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "댓글 ID"
          example: 1
        postId:
          type: integer
          format: int64
          description: "게시글 ID"
          example: 1
        userId:
          type: integer
          format: int64
          description: "작성자 ID"
          example: 2
        userNickname:
          type: string
          description: "작성자 닉네임"
          example: "투자고수박명수"
        content:
          type: string
          description: "댓글 내용"
          example: "좋은 선택이라고 생각합니다!"
        createdAt:
          type: string
          format: date-time
          description: "작성 시간"
          example: "2024-01-15T12:10:00Z"

    # Leaderboard DTOs
    LeaderboardResponse:
      type: object
      properties:
        rank:
          type: integer
          description: "순위"
          example: 1
        userId:
          type: integer
          format: int64
          description: "사용자 ID"
          example: 1
        userNickname:
          type: string
          description: "사용자 닉네임"
          example: "투자왕김첨지"
        sessionId:
          type: integer
          format: int64
          description: "세션 ID"
          example: 123
        finalBalance:
          type: number
          format: double
          description: "최종 잔액"
          example: 1150000.00
        totalValue:
          type: number
          format: double
          description: "총 자산 가치"
          example: 1200000.00
        profitLoss:
          type: number
          format: double
          description: "손익"
          example: 200000.00
        profitLossPercent:
          type: number
          format: double
          description: "손익률 (%)"
          example: 20.0
        completedAt:
          type: string
          format: date-time
          description: "완료 시간"
          example: "2024-01-31T23:59:59Z"