name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew
      
    - name: Run Checkstyle
      run: |
        cd backend
        ./gradlew checkstyleMain checkstyleTest || true
      continue-on-error: true
      
    - name: Run SpotBugs
      run: |
        cd backend
        ./gradlew spotbugsMain || true
      continue-on-error: true
      
    - name: Run PMD
      run: |
        cd backend
        ./gradlew pmdMain || true
      continue-on-error: true
      
    - name: Generate JaCoCo Test Report
      run: |
        cd backend
        ./gradlew test jacocoTestReport
      
    - name: Upload Code Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/build/reports/jacoco/test/jacocoTestReport.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        
    - name: Setup npm cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint || true
      continue-on-error: true
      
    - name: Run TypeScript Check
      run: |
        cd frontend
        npm run type-check
        
    - name: Run Tests with Coverage
      run: |
        cd frontend
        npm run test -- --coverage
        
    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'StockQuest'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --suppression dependency-check-suppressions.xml
      continue-on-error: true
      
    - name: Upload Dependency Check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  sonarqube:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: stockquest_test
          MYSQL_ROOT_PASSWORD: test123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy
        
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run tests and SonarQube analysis
      run: |
        cd backend
        chmod +x gradlew
        ./gradlew test jacocoTestReport sonar \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.projectKey=stockquest \
          -Dsonar.organization=seongmin1117
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: stockquest_test
        DB_USERNAME: root
        DB_PASSWORD: test123