package com.stockquest.domain.content.articletag.port;

import com.stockquest.domain.content.articletag.ArticleTag;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * 글-태그 연결 저장소 포트 (출력 포트)
 */
public interface ArticleTagRepository {

    /**
     * 글-태그 연결 저장
     */
    ArticleTag save(ArticleTag articleTag);

    /**
     * 글-태그 연결 목록 일괄 저장
     */
    List<ArticleTag> saveAll(List<ArticleTag> articleTags);

    /**
     * 글-태그 연결 조회
     */
    Optional<ArticleTag> findByArticleIdAndTagId(Long articleId, Long tagId);

    /**
     * 특정 글의 모든 태그 조회 (순서대로)
     */
    List<ArticleTag> findByArticleIdOrderByTagOrder(Long articleId);

    /**
     * 특정 태그가 연결된 모든 글 조회
     */
    List<ArticleTag> findByTagId(Long tagId);

    /**
     * 특정 글의 주요 태그 조회 (중요도 높은 순)
     */
    List<ArticleTag> findPrimaryTagsByArticleId(Long articleId);

    /**
     * 특정 글의 자동 생성 태그 조회
     */
    List<ArticleTag> findAutoGeneratedByArticleId(Long articleId);

    /**
     * 특정 글의 수동 추가 태그 조회
     */
    List<ArticleTag> findManuallyAddedByArticleId(Long articleId);

    /**
     * 높은 관련성을 가진 태그 연결 조회
     */
    List<ArticleTag> findHighlyRelevantByArticleId(Long articleId);

    /**
     * 여러 글의 태그 조회 (글 ID 목록)
     */
    List<ArticleTag> findByArticleIds(List<Long> articleIds);

    /**
     * 여러 태그의 글 조회 (태그 ID 목록)
     */
    List<ArticleTag> findByTagIds(List<Long> tagIds);

    /**
     * 특정 기간에 추가된 태그 연결 조회
     */
    List<ArticleTag> findByCreatedAtBetween(LocalDateTime startDate, LocalDateTime endDate);

    /**
     * 특정 사용자가 추가한 태그 연결 조회
     */
    List<ArticleTag> findByCreatedBy(Long userId);

    /**
     * 글별 태그 수 조회
     */
    List<ArticleTagCount> getArticleTagCounts();

    /**
     * 태그별 글 수 조회
     */
    List<TagArticleCount> getTagArticleCounts();

    /**
     * 가장 많이 함께 사용되는 태그 조합 조회
     */
    List<TagCombination> getMostUsedTagCombinations(int limit);

    /**
     * 특정 태그와 함께 사용되는 태그 조회
     */
    List<CoOccurringTag> getCoOccurringTags(Long tagId, int limit);

    /**
     * 글의 태그 수 조회
     */
    long countByArticleId(Long articleId);

    /**
     * 태그의 글 수 조회
     */
    long countByTagId(Long tagId);

    /**
     * 자동 생성 태그 수 조회
     */
    long countAutoGenerated();

    /**
     * 수동 추가 태그 수 조회
     */
    long countManuallyAdded();

    /**
     * 특정 기간 내 추가된 태그 연결 수 조회
     */
    long countByCreatedAtBetween(LocalDateTime startDate, LocalDateTime endDate);

    /**
     * 글-태그 연결 존재 확인
     */
    boolean existsByArticleIdAndTagId(Long articleId, Long tagId);

    /**
     * 글-태그 연결 삭제
     */
    void deleteByArticleIdAndTagId(Long articleId, Long tagId);

    /**
     * 특정 글의 모든 태그 연결 삭제
     */
    void deleteByArticleId(Long articleId);

    /**
     * 특정 태그의 모든 연결 삭제
     */
    void deleteByTagId(Long tagId);

    /**
     * 자동 생성된 태그 연결 삭제
     */
    void deleteAutoGeneratedByArticleId(Long articleId);

    /**
     * 관련성 점수가 낮은 태그 연결 삭제
     */
    void deleteLowRelevanceConnections(Double threshold);

    /**
     * 태그 순서 일괄 업데이트
     */
    void updateTagOrders(Long articleId, List<TagOrderUpdate> updates);

    /**
     * 관련성 점수 일괄 업데이트
     */
    void updateRelevanceScores(List<RelevanceScoreUpdate> updates);

    /**
     * 글별 태그 수 데이터 클래스
     */
    record ArticleTagCount(
        Long articleId,
        String articleTitle,
        Long tagCount,
        Long autoGeneratedTagCount,
        Long manualTagCount,
        Double averageRelevanceScore
    ) {}

    /**
     * 태그별 글 수 데이터 클래스
     */
    record TagArticleCount(
        Long tagId,
        String tagName,
        Long articleCount,
        Double averageRelevanceScore,
        LocalDateTime lastUsed
    ) {}

    /**
     * 태그 조합 데이터 클래스
     */
    record TagCombination(
        List<Long> tagIds,
        List<String> tagNames,
        Long combinationCount,
        Double averageRelevanceScore
    ) {}

    /**
     * 공동 출현 태그 데이터 클래스
     */
    record CoOccurringTag(
        Long tagId,
        String tagName,
        Long coOccurrenceCount,
        Double correlationScore,
        Double averageRelevanceScore
    ) {}

    /**
     * 태그 순서 업데이트 데이터 클래스
     */
    record TagOrderUpdate(
        Long tagId,
        Integer newOrder
    ) {}

    /**
     * 관련성 점수 업데이트 데이터 클래스
     */
    record RelevanceScoreUpdate(
        Long articleId,
        Long tagId,
        Double newScore
    ) {}

    /**
     * 태그 사용 패턴 분석
     */
    List<TagUsagePattern> getTagUsagePatterns(Long tagId);

    /**
     * 태그 사용 패턴 데이터 클래스
     */
    record TagUsagePattern(
        LocalDateTime period,
        Long usageCount,
        Double averageRelevance,
        Long uniqueArticleCount
    ) {}

    /**
     * 글의 태그 분포 분석
     */
    TagDistribution getArticleTagDistribution(Long articleId);

    /**
     * 태그 분포 데이터 클래스
     */
    record TagDistribution(
        Long articleId,
        Long totalTags,
        Long primaryTags,
        Long secondaryTags,
        Long autoGeneratedTags,
        Long manualTags,
        Double averageRelevanceScore,
        Double tagDiversityScore
    ) {}

    /**
     * 전체 태그 네트워크 분석
     */
    List<TagNetworkNode> getTagNetworkAnalysis();

    /**
     * 태그 네트워크 노드 데이터 클래스
     */
    record TagNetworkNode(
        Long tagId,
        String tagName,
        Long connectionCount,
        Double centralityScore,
        List<TagConnection> connections
    ) {}

    /**
     * 태그 연결 데이터 클래스
     */
    record TagConnection(
        Long connectedTagId,
        String connectedTagName,
        Long coOccurrenceCount,
        Double connectionStrength
    ) {}

    /**
     * 고아 태그 조회 (어떤 글과도 연결되지 않은 태그)
     */
    List<Long> findOrphanTagIds();

    /**
     * 중복 태그 연결 정리
     */
    void cleanupDuplicateConnections();

    /**
     * 오래된 자동 생성 태그 정리
     */
    void cleanupOldAutoGeneratedTags(LocalDateTime cutoffDate);
}