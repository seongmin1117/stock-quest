package com.stockquest.domain.content.articletag;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * 글-태그 연결 도메인 엔티티
 * Article과 Tag의 다대다 관계를 처리하는 연결 테이블
 */
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
public class ArticleTag {

    /**
     * 글 ID
     */
    private Long articleId;

    /**
     * 태그 ID
     */
    private Long tagId;

    /**
     * 태그가 글에 추가된 순서 (1부터 시작)
     */
    private Integer tagOrder;

    /**
     * 태그 중요도 (0.0 ~ 1.0)
     * 해당 글에서 이 태그의 중요성/관련성을 나타냄
     */
    @Builder.Default
    private Double relevanceScore = 1.0;

    /**
     * 자동 생성된 태그인지 여부 (AI/ML에 의해 자동 추천/생성)
     */
    @Builder.Default
    private boolean autoGenerated = false;

    /**
     * 태그 생성자 ID (사용자가 수동으로 추가한 경우)
     */
    private Long createdBy;

    /**
     * 태그가 추가된 시간
     */
    private LocalDateTime createdAt;

    /**
     * 도메인 생성자
     */
    public ArticleTag(Long articleId, Long tagId, Integer tagOrder, Double relevanceScore, Long createdBy) {
        validateArticleId(articleId);
        validateTagId(tagId);
        validateTagOrder(tagOrder);
        validateRelevanceScore(relevanceScore);

        this.articleId = articleId;
        this.tagId = tagId;
        this.tagOrder = tagOrder;
        this.relevanceScore = relevanceScore != null ? relevanceScore : 1.0;
        this.autoGenerated = false;
        this.createdBy = createdBy;
        this.createdAt = LocalDateTime.now();
    }

    /**
     * 자동 생성된 태그를 위한 생성자
     */
    public static ArticleTag createAutoGenerated(Long articleId, Long tagId, Integer tagOrder, Double relevanceScore) {
        ArticleTag articleTag = new ArticleTag();
        articleTag.articleId = articleId;
        articleTag.tagId = tagId;
        articleTag.tagOrder = tagOrder;
        articleTag.relevanceScore = relevanceScore != null ? relevanceScore : 1.0;
        articleTag.autoGenerated = true;
        articleTag.createdBy = null;
        articleTag.createdAt = LocalDateTime.now();
        return articleTag;
    }

    private void validateArticleId(Long articleId) {
        if (articleId == null || articleId <= 0) {
            throw new IllegalArgumentException("글 ID는 양수여야 합니다");
        }
    }

    private void validateTagId(Long tagId) {
        if (tagId == null || tagId <= 0) {
            throw new IllegalArgumentException("태그 ID는 양수여야 합니다");
        }
    }

    private void validateTagOrder(Integer tagOrder) {
        if (tagOrder == null || tagOrder < 1) {
            throw new IllegalArgumentException("태그 순서는 1 이상이어야 합니다");
        }
    }

    private void validateRelevanceScore(Double relevanceScore) {
        if (relevanceScore != null && (relevanceScore < 0.0 || relevanceScore > 1.0)) {
            throw new IllegalArgumentException("관련성 점수는 0.0 ~ 1.0 사이여야 합니다");
        }
    }

    /**
     * 태그 순서 변경
     */
    public void changeOrder(Integer newOrder) {
        validateTagOrder(newOrder);
        this.tagOrder = newOrder;
    }

    /**
     * 관련성 점수 업데이트
     */
    public void updateRelevanceScore(Double newScore) {
        validateRelevanceScore(newScore);
        this.relevanceScore = newScore;
    }

    /**
     * 수동으로 추가된 태그인지 확인
     */
    public boolean isManuallyAdded() {
        return !this.autoGenerated;
    }

    /**
     * 자동 생성된 태그인지 확인
     */
    public boolean isAutoGenerated() {
        return this.autoGenerated;
    }

    /**
     * 높은 관련성을 가진 태그인지 확인
     */
    public boolean isHighlyRelevant() {
        return this.relevanceScore >= 0.8;
    }

    /**
     * 중간 관련성을 가진 태그인지 확인
     */
    public boolean isModeratelyRelevant() {
        return this.relevanceScore >= 0.5 && this.relevanceScore < 0.8;
    }

    /**
     * 낮은 관련성을 가진 태그인지 확인
     */
    public boolean isLowRelevant() {
        return this.relevanceScore < 0.5;
    }

    /**
     * 주요 태그인지 확인 (순서가 5번 이내이고 관련성이 높은 태그)
     */
    public boolean isPrimaryTag() {
        return this.tagOrder <= 5 && this.relevanceScore >= 0.7;
    }

    /**
     * 보조 태그인지 확인
     */
    public boolean isSecondaryTag() {
        return !isPrimaryTag();
    }

    /**
     * 태그 가중치 계산 (순서와 관련성을 고려)
     */
    public Double calculateWeight() {
        // 순서가 앞설수록 높은 가중치, 관련성 점수도 반영
        double orderWeight = 1.0 / this.tagOrder;
        return orderWeight * this.relevanceScore;
    }

    /**
     * 태그 중요도 레벨 계산
     */
    public TagImportanceLevel getImportanceLevel() {
        double weight = calculateWeight();

        if (weight >= 0.8) {
            return TagImportanceLevel.CRITICAL;
        } else if (weight >= 0.6) {
            return TagImportanceLevel.HIGH;
        } else if (weight >= 0.4) {
            return TagImportanceLevel.MEDIUM;
        } else if (weight >= 0.2) {
            return TagImportanceLevel.LOW;
        } else {
            return TagImportanceLevel.MINIMAL;
        }
    }

    /**
     * 복합 키 생성 (articleId + tagId)
     */
    public String getCompositeKey() {
        return articleId + "_" + tagId;
    }

    /**
     * 동일한 연결인지 확인
     */
    public boolean isSameConnection(Long articleId, Long tagId) {
        return this.articleId.equals(articleId) && this.tagId.equals(tagId);
    }

    /**
     * 태그 중요도 레벨
     */
    public enum TagImportanceLevel {
        MINIMAL("최소", "#EEEEEE", 1),
        LOW("낮음", "#BDBDBD", 2),
        MEDIUM("보통", "#757575", 3),
        HIGH("높음", "#424242", 4),
        CRITICAL("중요", "#212121", 5);

        private final String displayName;
        private final String colorCode;
        private final int level;

        TagImportanceLevel(String displayName, String colorCode, int level) {
            this.displayName = displayName;
            this.colorCode = colorCode;
            this.level = level;
        }

        public String getDisplayName() {
            return displayName;
        }

        public String getColorCode() {
            return colorCode;
        }

        public int getLevel() {
            return level;
        }

        /**
         * 특정 레벨 이상인지 확인
         */
        public boolean isLevelOrAbove(TagImportanceLevel targetLevel) {
            return this.level >= targetLevel.level;
        }

        /**
         * 특정 레벨 이하인지 확인
         */
        public boolean isLevelOrBelow(TagImportanceLevel targetLevel) {
            return this.level <= targetLevel.level;
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ArticleTag that = (ArticleTag) o;

        if (!articleId.equals(that.articleId)) return false;
        return tagId.equals(that.tagId);
    }

    @Override
    public int hashCode() {
        int result = articleId.hashCode();
        result = 31 * result + tagId.hashCode();
        return result;
    }

    @Override
    public String toString() {
        return "ArticleTag{" +
                "articleId=" + articleId +
                ", tagId=" + tagId +
                ", tagOrder=" + tagOrder +
                ", relevanceScore=" + relevanceScore +
                ", autoGenerated=" + autoGenerated +
                '}';
    }
}