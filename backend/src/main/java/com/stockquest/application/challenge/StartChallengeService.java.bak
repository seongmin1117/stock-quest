package com.stockquest.application.challenge;

import com.stockquest.application.challenge.port.in.StartChallengeUseCase;
import com.stockquest.domain.challenge.Challenge;
import com.stockquest.domain.challenge.port.ChallengeRepository;
import com.stockquest.domain.session.ChallengeSession;
import com.stockquest.domain.session.port.ChallengeSessionRepository;
import com.stockquest.domain.user.port.UserRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

/**
 * 챌린지 시작 서비스 구현체
 */
//@Service  // Temporarily disabled for basic startup
@Transactional
public class StartChallengeService implements StartChallengeUseCase {
    
    private final ChallengeRepository challengeRepository;
    private final ChallengeSessionRepository sessionRepository;
    private final UserRepository userRepository;
    private final BigDecimal defaultSeedBalance;
    
    public StartChallengeService(ChallengeRepository challengeRepository,
                               ChallengeSessionRepository sessionRepository,
                               UserRepository userRepository,
                               @Value("${stockquest.challenge.default-seed-balance:1000000}") 
                               BigDecimal defaultSeedBalance) {
        this.challengeRepository = challengeRepository;
        this.sessionRepository = sessionRepository;
        this.userRepository = userRepository;
        this.defaultSeedBalance = defaultSeedBalance;
    }
    
    @Override
    public StartChallengeResult start(StartChallengeCommand command) {
        validateStartCommand(command);
        
        // 사용자 존재 확인
        userRepository.findById(command.userId())
            .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 사용자입니다"));
        
        // 챌린지 조회 및 상태 확인
        Challenge challenge = challengeRepository.findById(command.challengeId())
            .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 챌린지입니다"));
        
        if (!challenge.isActive()) {
            throw new IllegalStateException("활성 상태가 아닌 챌린지는 참여할 수 없습니다");
        }
        
        // 중복 참여 확인
        sessionRepository.findByChallengeIdAndUserId(command.challengeId(), command.userId())
            .ifPresent(session -> {
                throw new IllegalStateException("이미 참여 중인 챌린지입니다");
            });
        
        // 챌린지 세션 생성 및 시작
        ChallengeSession session = new ChallengeSession(
            command.challengeId(), 
            command.userId(), 
            defaultSeedBalance
        );
        session.start();
        
        ChallengeSession savedSession = sessionRepository.save(session);
        
        return new StartChallengeResult(
            savedSession.getId(),
            challenge.getId(),
            challenge.getTitle(),
            savedSession.getSeedBalance(),
            savedSession.getStartedAt()
        );
    }
    
    private void validateStartCommand(StartChallengeCommand command) {
        if (command == null) {
            throw new IllegalArgumentException("챌린지 시작 정보는 필수입니다");
        }
        if (command.userId() == null || command.userId() <= 0) {
            throw new IllegalArgumentException("유효한 사용자 ID가 필요합니다");
        }
        if (command.challengeId() == null || command.challengeId() <= 0) {
            throw new IllegalArgumentException("유효한 챌린지 ID가 필요합니다");
        }
    }
}