# ===================================================================
# 개발 환경 설정 (application-dev.yml)
# Docker Compose MySQL/Redis 연결 최적화
# ===================================================================

spring:
  # 데이터베이스 설정 - Docker MySQL 최적화
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/stockquest?serverTimezone=UTC&characterEncoding=UTF-8&useUnicode=true&allowPublicKeyRetrieval=true&useSSL=false&autoReconnect=true&useLocalSessionState=true&rewriteBatchedStatements=true
    username: root
    password: rootpassword
    
    # HikariCP 개발 환경 최적화
    hikari:
      pool-name: "StockQuest-Dev-HikariCP"
      minimum-idle: 2
      maximum-pool-size: 10
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000
      connection-test-query: "SELECT 1"
      connection-init-sql: "SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci"
      
      # MySQL Driver 최적화 설정
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false

  # JPA/Hibernate 개발 설정
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        generate_statistics: true
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: 25
          fetch_size: 50
          lob:
            non_contextual_creation: true

  # Redis 개발 환경 설정
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      connect-timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: 2000ms

  # 캐시 개발 설정
  cache:
    type: redis
    redis:
      time-to-live: 1800s  # 30분 (개발용 짧게 설정)

# 로깅 설정 - 개발 환경
logging:
  level:
    root: INFO
    com.stockquest: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zaxxer.hikari: DEBUG
    org.springframework.cache: DEBUG
    org.springframework.transaction: DEBUG
    org.springframework.data.jpa: DEBUG
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%thread]){faint} %clr(%-5level){spring} [%X{traceId:-}] %clr(%logger{36}){cyan} - %msg%n"
    
# 개발용 성능 설정
management:
  endpoints:
    web:
      exposure:
        include: "*"  # 개발 환경에서는 모든 endpoint 노출
  endpoint:
    health:
      show-details: always
    env:
      show-values: always  # 개발 환경에서는 환경변수 값도 노출

# 애플리케이션 개발 설정
app:
  environment: development
  mail:
    enabled: false

# 개발용 비동기 처리 설정
async:
  core-pool-size: 5
  max-pool-size: 20
  queue-capacity: 100

# 개발용 캐시 통계 활성화
cache:
  statistics:
    enabled: true

# 개발용 외부 API 설정
yahoo-finance:
  timeout: 10000  # 개발 환경에서는 더 긴 타임아웃

# 개발용 시뮬레이션 설정
stockquest:
  simulation:
    batch-size: 10  # 개발용 작은 배치 크기
    thread-pool-size: 2
    max-concurrent-sessions: 100

