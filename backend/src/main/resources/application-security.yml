# 보안 전용 설정 파일
# 운영 환경에서는 환경변수로 오버라이드 필요

# JWT 보안 설정
jwt:
  # 환경변수로 설정: JWT_SECRET (256비트 이상 필수)
  secret: ${JWT_SECRET:CHANGE_THIS_TO_SECURE_256_BIT_KEY_IN_PRODUCTION_ENVIRONMENT_FOR_JWT_SIGNING}
  access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY:3600000}  # 1시간 (밀리초)
  refresh-token-validity: ${JWT_REFRESH_TOKEN_VALIDITY:604800000}  # 7일 (밀리초)
  issuer: ${JWT_ISSUER:StockQuest}
  audience: ${JWT_AUDIENCE:StockQuest-Users}

# 비밀번호 보안 정책
password:
  policy:
    min-length: 8
    max-length: 128
    require-uppercase: true
    require-lowercase: true
    require-digits: true
    require-special-chars: true
    max-history: 5  # 최근 5개 비밀번호 재사용 금지
  encoding:
    strength: 12  # BCrypt 강도

# 계정 잠금 정책
account:
  lockout:
    max-failed-attempts: 5
    lockout-duration-minutes: 30
    attempt-window-minutes: 15
    ip-max-failed-attempts: 3
    ip-lockout-duration-minutes: 60
    cleanup-interval-hours: 24  # 오래된 시도 기록 정리

# Rate Limiting 설정
app:
  rate-limit:
    enabled: true
    default:
      requests: 100
      duration: 60  # 초
    redis:
      key-prefix: "stockquest:rate_limit"
    
    # DDoS 방어 설정
    ddos:
      enabled: true
      global-threshold: 10000  # 전체 시스템 초당 요청 한계
      ip-threshold: 100  # IP당 초당 요청 한계
      block-duration-minutes: 60
    
    # 동적 조정 설정
    adaptive:
      enabled: true
      load-threshold: 0.8  # CPU/메모리 사용률 80% 초과 시 제한 강화
      scale-factor: 0.5  # 제한 강화 시 기존 한계의 50% 적용

# 세션 보안
session:
  security:
    cookie:
      secure: true  # HTTPS only
      http-only: true  # XSS 방지
      same-site: strict  # CSRF 방지
    timeout-minutes: 30
    max-concurrent-sessions: 3  # 사용자당 최대 동시 세션

# API 보안
api:
  security:
    # CORS 보안 강화
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: Authorization,Content-Type,X-Requested-With
      max-age: 3600
      allow-credentials: true
    
    # 헤더 보안
    headers:
      frame-options: DENY
      content-type-options: nosniff
      xss-protection: "1; mode=block"
      hsts:
        max-age: 31536000  # 1년
        include-subdomains: true
        preload: true
      referrer-policy: strict-origin-when-cross-origin
    
    # 콘텐츠 보안 정책
    csp:
      default-src: "'self'"
      script-src: "'self' 'unsafe-inline'"
      style-src: "'self' 'unsafe-inline'"
      img-src: "'self' data: https:"
      connect-src: "'self'"
      font-src: "'self'"
      frame-ancestors: "'none'"

# 감사 로깅
audit:
  enabled: true
  events:
    login: true
    logout: true
    password-change: true
    account-lockout: true
    admin-actions: true
    sensitive-data-access: true
  retention-days: 90
  log-level: INFO

# 보안 모니터링
monitoring:
  security:
    enabled: true
    alerts:
      suspicious-activity: true
      brute-force-attempts: true
      unusual-access-patterns: true
    thresholds:
      failed-login-rate: 10  # 분당 실패 로그인 횟수
      new-ip-threshold: 5  # 신규 IP 접근 알림 임계값
      
# 데이터 보호
data:
  protection:
    # 개인정보 마스킹
    masking:
      enabled: true
      email: true  # 이메일 마스킹
      phone: true  # 전화번호 마스킹
    
    # 데이터 암호화
    encryption:
      algorithm: AES-256-GCM
      key-rotation-days: 90
    
    # 데이터 보관
    retention:
      user-data-years: 3
      log-data-months: 12
      audit-data-years: 7

---
# 개발 환경 보안 설정
spring:
  config:
    activate:
      on-profile: dev

# 개발 환경에서는 더 관대한 설정
jwt:
  secret: dev-secret-key-for-development-only-not-for-production-use-minimum-256-bits-required
  access-token-validity: 86400000  # 24시간

account:
  lockout:
    max-failed-attempts: 10  # 개발 시 더 관대하게

app:
  rate-limit:
    enabled: false  # 개발 시 비활성화

monitoring:
  security:
    enabled: false  # 개발 시 알림 비활성화

---
# 운영 환경 보안 설정 (환경변수 필수)
spring:
  config:
    activate:
      on-profile: prod

# 운영 환경에서는 모든 보안 설정 활성화
jwt:
  secret: ${JWT_SECRET}  # 환경변수 필수
  access-token-validity: 3600000  # 1시간으로 단축

account:
  lockout:
    max-failed-attempts: 3  # 운영 환경에서 더 엄격하게

app:
  rate-limit:
    enabled: true
    ddos:
      enabled: true

api:
  security:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS}  # 환경변수 필수

monitoring:
  security:
    enabled: true
    alerts:
      suspicious-activity: true
      brute-force-attempts: true

# 운영 환경 전용 보안 설정
security:
  production:
    # IP 화이트리스트 (관리자 접근용)
    admin-ip-whitelist: ${ADMIN_IP_WHITELIST:}
    
    # 보안 토큰 검증 강화
    strict-token-validation: true
    
    # 민감한 엔드포인트 추가 보호
    protected-endpoints:
      - "/actuator/**"
      - "/api/admin/**"
      - "/management/**"